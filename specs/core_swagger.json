{
  "swagger" : "2.0",
  "info" : {
    "description" : "These services provide programmatic access to various types of data persisted within the system.  All endpoints are protected by HTTP Basic Authentication.  Some endpoints provide access only to users with 'ADMIN' role privileges.  Using these APIs you can access things like detailed attribute information about various types of resources, manipulate some configurable application settings and data, and more.\n\nThe major resources of the data model defined within these APIs are:\n\n* Groups/Sites\n* Devices\n* Interfaces\n* Links\n* Hosts\n\nEach resource of the data model supports various actions and different attributes which can be accessed.  Please see the detailed definition of each endpoint and model resource to learn more about what is available.",
    "version" : "2.0",
    "title" : "Riverbed NetIM RESTful APIs",
    "contact" : {
      "name" : "Riverbed Global Support",
      "url" : "https://support.riverbed.com/",
      "email" : "support@riverbed.com"
    },
    "license" : {
      "name" : "Riverbed Technology, Inc. - All Rights Reserved",
      "url" : "https://www.riverbed.com/"
    }
  },
  "basePath" : "/api/netim",
  "tags" : [ {
    "name" : "Archives APIs",
    "description" : "The Archives APIs provide access to the CLI file archives that have been collected over time for specific devices."
  }, {
    "name" : "Custom Attributes APIs",
    "description" : "The Custom Attributes APIs provide access to the custom attributes that can be associated with various types of resources.  Through these APIs you can take full programmatic control of the creation and application of custom attributes.\n\nCustom attributes find their definition and structure in what is referred to as a custom attribute definition.  In order to apply a 'value' to an resource of the model, a custom attribute definition must first be provided.  The custom attribute value provides an association of a 'value' to one or more model resources."
  }, {
    "name" : "Default Thresholds APIs",
    "description" : "The Default Thresholds APIs provide access to the default thresholds.  These default thresholds are utilized for alerting and health calculations."
  }, {
    "name" : "Devices APIs",
    "description" : "The Devices APIs provide access to data about devices."
  }, {
    "name" : "Groups/Sites APIs",
    "description" : "The Groups/Sites APIs provide access to data about groups.\n\nGroups/sites can 'contain' other groups/sites and/or devices.  Sites and groups generally behave similarly with the primary exception that sites are 'exclusive', meaning that a device or other site may 'belong' to only one site.  When using these APIs, groups and sites can be used interchangeably.  When a group 'ID' is referenced, that can be a group or site 'ID'.  When creating or modifying groups, those changes may not be immediately visible within the system, there may be a delay in persistence depending on system activity and load."
  }, {
    "name" : "Interfaces APIs",
    "description" : "The Interfaces APIs provide access to data about interfaces."
  }, {
    "name" : "Hosts APIs",
    "description" : "The Hosts APIs provide access to data about hosts.  Hosts are typically end-systems of varying types whose connection to a device in the model is automatically detected."
  }, {
    "name" : "Links APIs",
    "description" : "The Links APIs provide access to data about links."
  }, {
    "name" : "Metric Classes APIs",
    "description" : "The Metric Classes APIs provide information about the definition of the metric classes and metrics that can be accessed."
  }, {
    "name" : "Locations APIs",
    "description" : "The Locations APIs provide access to the locations available for assignment within the product."
  }, {
    "name" : "Polling APIs",
    "description" : "The Polling APIs provide access to various types of information and controls related to polling."
  }, {
    "name" : "Waps APIs",
    "description" : "The Waps APIs provide access to data about wireless access points. The connection of WAPs to WLCs in the model is automatically detected."
  } ],
  "schemes" : [ "https" ],
  "security" : [ {
    "basicAuth" : [ ]
  } ],
  "paths" : {
    "/v1/alert-profiles/{id}" : {
      "get" : {
        "tags" : [ "Alert APIs" ],
        "summary" : "Returns the alert profile given by the provided id.",
        "description" : "",
        "operationId" : "getAlertProfileV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Alert Profile ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "alertProfileIncludeOnlyAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be included in the response content.  If left empty, all available attributes will be included. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will cause the minimum set of attributes to be included in the response.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "alertProfileExcludeAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be excluded in the response content.  If left empty, no attributes will be excluded. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will be ignored.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertProfile"
            }
          },
          "404" : {
            "description" : "The alert profile could not be found."
          },
          "500" : {
            "description" : "An error occurred, the alert profile could not be retrieved."
          }
        }
      },
      "delete" : {
        "tags" : [ "Alert APIs" ],
        "summary" : "(ADMIN role required) Deletes an Alert Profile.",
        "description" : "",
        "operationId" : "deleteAlertProfileV1",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "404" : {
            "description" : "The Alert Profile could not be found."
          },
          "500" : {
            "description" : "Could not delete the Alert Profile."
          }
        }
      },
      "patch" : {
        "tags" : [ "Alert APIs" ],
        "summary" : "Returns the alert profile updated.",
        "description" : "",
        "operationId" : "updateAlertProfileV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Alert Profile to be updated ",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Alert Profile Modifiable attributes",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModifiableAlertProfileV1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertProfile"
            }
          },
          "404" : {
            "description" : "The alert profile could not be found."
          },
          "422" : {
            "description" : "Request was not valid, the alert profile will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the alert profile was not updated."
          },
          "202" : {
            "description" : "The alert profile will be updated."
          }
        }
      }
    },
    "/v1/alert-profiles" : {
      "get" : {
        "tags" : [ "Alert APIs" ],
        "summary" : "Returns a list of alert profiles.",
        "description" : "",
        "operationId" : "getAllAlertProfilesV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "alertProfileIncludeOnlyAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be included in the response content.  If left empty, all available attributes will be included. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will cause the minimum set of attributes to be included in the response.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "alertProfileExcludeAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be excluded in the response content.  If left empty, no attributes will be excluded. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will be ignored.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertProfileBeanListV1"
            }
          },
          "500" : {
            "description" : "An error occurred, the alert profiles could not be retrieved."
          }
        }
      },
      "post" : {
        "tags" : [ "Alert APIs" ],
        "summary" : "Creates a new Alert Profile.",
        "description" : "",
        "operationId" : "createAlertProfileV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New Alert Profile.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreatableAlertProfileV1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertProfile"
            }
          },
          "500" : {
            "description" : "Could not create the Alert Profile."
          }
        }
      }
    },
    "/v2/alert-profiles/{id}" : {
      "get" : {
        "tags" : [ "Alert APIs" ],
        "summary" : "Returns the alert profile given by the provided id.",
        "description" : "",
        "operationId" : "getAlertProfile_1V2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Alert Profile ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "alertProfileIncludeOnlyAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be included in the response content.  If left empty, all available attributes will be included. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will cause the minimum set of attributes to be included in the response.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "alertProfileExcludeAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be excluded in the response content.  If left empty, no attributes will be excluded. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will be ignored.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertProfile"
            }
          },
          "404" : {
            "description" : "The alert profile could not be found."
          },
          "500" : {
            "description" : "An error occurred, the alert profile could not be retrieved."
          }
        }
      },
      "delete" : {
        "tags" : [ "Alert APIs" ],
        "summary" : "(ADMIN role required) Deletes an Alert Profile.",
        "description" : "",
        "operationId" : "deleteAlertProfile_1V2",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "404" : {
            "description" : "The Alert Profile could not be found."
          },
          "500" : {
            "description" : "Could not delete the Alert Profile."
          }
        }
      },
      "patch" : {
        "tags" : [ "Alert APIs" ],
        "summary" : "(ADMIN role required) Returns the alert profile updated.",
        "description" : "",
        "operationId" : "updateAlertProfile_1V2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Alert Profile to be updated ",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Alert Profile Modifiable attributes",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModifiableAlertProfileV2"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertProfile"
            }
          },
          "400" : {
            "description" : "Invalid request."
          },
          "404" : {
            "description" : "The alert profile could not be found."
          },
          "422" : {
            "description" : "Request was not valid, the alert profile will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the alert profile was not updated."
          },
          "202" : {
            "description" : "The alert profile will be updated."
          }
        }
      }
    },
    "/v2/alert-profiles" : {
      "get" : {
        "tags" : [ "Alert APIs" ],
        "summary" : "Returns a list of alert profiles.",
        "description" : "",
        "operationId" : "getAllAlertProfiles_1V2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "alertProfileIncludeOnlyAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be included in the response content.  If left empty, all available attributes will be included. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will cause the minimum set of attributes to be included in the response.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "alertProfileExcludeAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be excluded in the response content.  If left empty, no attributes will be excluded. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will be ignored.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertProfileBeanListV2"
            }
          },
          "500" : {
            "description" : "An error occurred, the alert profiles could not be retrieved."
          }
        }
      },
      "post" : {
        "tags" : [ "Alert APIs" ],
        "summary" : "(ADMIN role required) Creates a new Alert Profile.",
        "description" : "",
        "operationId" : "createAlertProfile_1V2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New Alert Profile.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreatableAlertProfileV2"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AlertProfile"
            }
          },
          "400" : {
            "description" : "Invalid request."
          },
          "500" : {
            "description" : "Could not create the Alert Profile."
          }
        }
      }
    },
    "/v1/archives/{id}/file" : {
      "get" : {
        "tags" : [ "Archives APIs" ],
        "summary" : "Returns the content of the archive.",
        "description" : "",
        "operationId" : "getFileV1",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Archive ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StreamingOutput"
            }
          },
          "404" : {
            "description" : "The archive could not be found"
          }
        }
      }
    },
    "/v1/archives/{id}" : {
      "get" : {
        "tags" : [ "Archives APIs" ],
        "summary" : "Returns the archive.",
        "description" : "",
        "operationId" : "getArchiveV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Archive ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Archive"
            }
          },
          "404" : {
            "description" : "The archive could not be found"
          }
        }
      }
    },
    "/v1/custom-attribute-values/{id}" : {
      "get" : {
        "tags" : [ "Custom Attributes APIs" ],
        "summary" : "Returns the custom attribute value.",
        "description" : "",
        "operationId" : "getCustomAttributeValueV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Custom attribute value ID",
          "required" : true,
          "type" : "integer",
          "pattern" : "\\d+",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeValue"
            }
          },
          "404" : {
            "description" : "The custom attribute value could not be found"
          }
        }
      },
      "put" : {
        "tags" : [ "Custom Attributes APIs" ],
        "summary" : "Updates the custom attribute definition.",
        "description" : "",
        "operationId" : "updateCustomAttributeValueViaPutV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Custom attribute value ID",
          "required" : true,
          "type" : "integer",
          "pattern" : "\\d+",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Modify custom attribute value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifyCustomAttributeValue"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeValue"
            }
          },
          "404" : {
            "description" : "The custom attribute value could not be found."
          },
          "422" : {
            "description" : "The new value specified is invalid."
          },
          "500" : {
            "description" : "Server could not process request."
          }
        }
      }
    },
    "/v1/custom-attribute-values" : {
      "get" : {
        "tags" : [ "Custom Attributes APIs" ],
        "summary" : "Returns a list of custom attribute values",
        "description" : "Returns a list of custom attribute values that is filtered using the query params",
        "operationId" : "getAllCustomAttributeValuesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "attributeId",
          "in" : "query",
          "description" : "Attribute definition whose values are being requested",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        }, {
          "name" : "deviceIds",
          "in" : "query",
          "description" : "Device ID(s)",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "interfaceIds",
          "in" : "query",
          "description" : "Interface ID(s)",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "linkIds",
          "in" : "query",
          "description" : "Link ID(s)",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "groupIds",
          "in" : "query",
          "description" : "Group ID(s)",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "testIds",
          "in" : "query",
          "description" : "Test ID(s)",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "csv"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeValueList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Custom Attributes APIs" ],
        "summary" : "Creates the new custom attribute value.",
        "description" : "",
        "operationId" : "createNewCustomAttributeValueV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New custom attribute value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NewCustomAttributeValue"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeValue"
            }
          },
          "422" : {
            "description" : "The custom attribute definition could not be found or the new value specified is invalid."
          },
          "500" : {
            "description" : "Server could not process request."
          }
        }
      }
    },
    "/v1/custom-attributes/{id}" : {
      "get" : {
        "tags" : [ "Custom Attributes APIs" ],
        "summary" : "Returns the custom attribute definition given by the ID.",
        "description" : "",
        "operationId" : "getCustomAttributeV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Custom Attribute Definition ID",
          "required" : true,
          "type" : "integer",
          "pattern" : "\\d+",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeDefinition"
            }
          },
          "404" : {
            "description" : "The custom attribute definition could not be found."
          }
        }
      },
      "put" : {
        "tags" : [ "Custom Attributes APIs" ],
        "summary" : "Updates the custom attribute definition given by the ID.",
        "description" : "",
        "operationId" : "updateCustomAttributeViaPutV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Custom Attribute Definition ID",
          "required" : true,
          "type" : "integer",
          "pattern" : "\\d+",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Custom Attribute Definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomAttributeDefinitionUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeDefinition"
            }
          },
          "400" : {
            "description" : "The request was invalid and could not be processed."
          },
          "404" : {
            "description" : "The custom attribute definition could not be found."
          },
          "500" : {
            "description" : "Server could not update the custom attribute definition."
          }
        }
      },
      "delete" : {
        "tags" : [ "Custom Attributes APIs" ],
        "summary" : "(ADMIN role required) Deletes the custom attribute definition given by the ID.",
        "description" : "",
        "operationId" : "deleteCustomAttributeV1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Custom attribute definition ID",
          "required" : true,
          "type" : "integer",
          "pattern" : "\\d+",
          "format" : "int64"
        } ],
        "responses" : {
          "404" : {
            "description" : "The custom attribute definition could not be found."
          },
          "500" : {
            "description" : "Server could not process the delete request."
          }
        }
      }
    },
    "/v1/custom-attributes" : {
      "get" : {
        "tags" : [ "Custom Attributes APIs" ],
        "summary" : "Returns a list of custom attribute definitions.",
        "description" : "",
        "operationId" : "getAllCustomAttributesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "objectType",
          "in" : "query",
          "description" : "Filter to only custom attributes that apply to the given type of object.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter to only custom attributes with the given name.  If name is provided, the objectType attribute is ignored.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeDefinitionList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Custom Attributes APIs" ],
        "summary" : "Creates a new custom attribute definition.",
        "description" : "",
        "operationId" : "createNewCustomAttributeV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Custom Attribute Definition",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomAttributeDefinitionCreate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeDefinition"
            }
          },
          "500" : {
            "description" : "Server could not create the new custom attribute definition."
          }
        }
      }
    },
    "/v1/business-hour-profiles/{id}" : {
      "get" : {
        "tags" : [ "Business Hour APIs" ],
        "summary" : "Returns the businessHour profile given by the provided id.",
        "description" : "",
        "operationId" : "getBusinessHourProfileV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "BusinessHour Profile ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BusinessHourProfileBean"
            }
          },
          "404" : {
            "description" : "The businessHour profile could not be found."
          },
          "500" : {
            "description" : "An error occurred, the businessHour profile could not be retrieved."
          }
        }
      },
      "patch" : {
        "tags" : [ "Business Hour APIs" ],
        "summary" : "Returns the businessHour profile updated.",
        "description" : "",
        "operationId" : "updateBusinessHourProfileV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "BusinessHour Profile ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "BusinessHour Profile",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/BusinessHourProfileBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ProfileBean"
            }
          },
          "404" : {
            "description" : "The businessHour profile could not be found."
          },
          "422" : {
            "description" : "Request was not valid, the businessHour profile will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the businessHour profile was not updated."
          },
          "202" : {
            "description" : "The businessHour profile will be updated."
          }
        }
      }
    },
    "/v1/business-hour-profiles" : {
      "get" : {
        "tags" : [ "Business Hour APIs" ],
        "summary" : "Returns a list of businessHour profiles.",
        "description" : "",
        "operationId" : "getAllBusinessHourProfilesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BusinessHourProfileBeanList"
            }
          },
          "500" : {
            "description" : "An error occurred, the businessHour profiles could not be retrieved."
          }
        }
      }
    },
    "/v1/archives/archive-settings" : {
      "get" : {
        "tags" : [ "Archives APIs" ],
        "summary" : "Returns information about the overall archive settings.",
        "description" : "",
        "operationId" : "getConfigFileArchiveInfoV1",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ConfigFileArchiveInfo"
            }
          }
        }
      }
    },
    "/v1/default-thresholds/{id}" : {
      "get" : {
        "tags" : [ "Default Thresholds APIs" ],
        "summary" : "Returns the Default Threshold associated to the id specified",
        "description" : "",
        "operationId" : "getThresholdV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Default Threshold ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DefaultThreshold"
            }
          },
          "404" : {
            "description" : "The Default Threshold could not be found."
          }
        }
      },
      "put" : {
        "tags" : [ "Default Thresholds APIs" ],
        "summary" : "(ADMIN role required) Updates an existing Default Threshold ",
        "description" : "",
        "operationId" : "updateThresholdV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Default Threshold ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "ModifyDefaultThreshold",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableDefaultThreshold"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DefaultThreshold"
            }
          },
          "404" : {
            "description" : "The Default Threshold could not be found."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/default-thresholds" : {
      "get" : {
        "tags" : [ "Default Thresholds APIs" ],
        "summary" : "Returns a list of Default Thresholds",
        "description" : "",
        "operationId" : "getDefaultThresholdsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DefaultThresholdList"
            }
          }
        }
      }
    },
    "/v1/device-access-infos" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "(ADMIN role required) Returns all of the device access infos in the data model.  The response format is controlled by the 'Accept' header.  The supported 'Accept' types are application/json and text/plain. If not provided, the default is 'application/json'.  When text/plain is requested, the response content will be CSV formatted, equivalent to the format exported by the Device Manager.",
        "description" : "",
        "operationId" : "getAllDeviceAccessInfosV1",
        "produces" : [ "application/json", "text/plain" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DeviceAccessInfoList"
            }
          }
        }
      }
    },
    "/v1/device-access-infos/import" : {
      "post" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Imports the supplied device access info file.",
        "description" : "",
        "operationId" : "importFileV1",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "DeviceAccessInfoFile",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeviceAccessInfoFile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GenericHttpResponseList"
            }
          },
          "400" : {
            "description" : "The request was invalid and could not be processed."
          },
          "500" : {
            "description" : "An error occurred, device access info file not imported."
          }
        }
      }
    },
    "/v1/devices/{id}/hosts" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns all the detected IP hosts on the device.",
        "description" : "",
        "operationId" : "getHostsOnDeviceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "detectedIPsOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "includePollingInfo",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HostList"
            }
          },
          "404" : {
            "description" : "The device could not be found"
          }
        }
      }
    },
    "/v1/devices/{id}/access-points" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns all the WAPs connected to this WLC.",
        "description" : "",
        "operationId" : "getWapsConnectedToDeviceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "associatedWapsOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WapList"
            }
          },
          "404" : {
            "description" : "The device could not be found"
          }
        }
      }
    },
    "/v1/devices" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns all of the devices in the data model.",
        "description" : "",
        "operationId" : "getAllDevicesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "deviceIds",
          "in" : "query",
          "description" : "Device IDs to include in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "deviceIp",
          "in" : "query",
          "description" : "IP of devices to include in the response",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accessIp",
          "in" : "query",
          "description" : "Access IP of device to include in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DeviceList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Creates a new device(s).",
        "description" : "",
        "operationId" : "createDevicesV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Devices",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModifiableDeviceList"
          }
        } ],
        "responses" : {
          "207" : {
            "description" : "See response content for per device status.",
            "schema" : {
              "$ref" : "#/definitions/GenericHttpResponseList"
            }
          },
          "422" : {
            "description" : "Request was not valid, no devices were created."
          },
          "500" : {
            "description" : "An error occurred, no devices were created."
          }
        }
      },
      "delete" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Deletes all devices.",
        "description" : "",
        "operationId" : "deleteAllDevicesV1",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "DeviceIds",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ObjectIdsBean"
          }
        }, {
          "name" : "excludeFromDiscovery",
          "in" : "query",
          "description" : "Exclude deleted device from future Discovery.",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "confirmDeleteAll",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "202" : {
            "description" : "All devices will be deleted."
          }
        }
      },
      "patch" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Updates a device(s).",
        "description" : "",
        "operationId" : "updateDevicesV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Devices",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModifiableDeviceList"
          }
        } ],
        "responses" : {
          "207" : {
            "description" : "See response content for per device status.",
            "schema" : {
              "$ref" : "#/definitions/GenericHttpResponseList"
            }
          },
          "422" : {
            "description" : "Request was not valid, no devices were updated."
          },
          "500" : {
            "description" : "An error occurred, no devices were updated."
          }
        }
      }
    },
    "/v1/devices/{id}/polling-profile" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns the polling profile that the device is is associated with.",
        "description" : "",
        "operationId" : "getPollingProfileForDeviceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PollingProfileBean"
            }
          },
          "404" : {
            "description" : "The device or polling profile could not be found"
          }
        }
      }
    },
    "/v1/devices/{id}/business-hour-profile" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns the business hour profile that the device is is associated with.",
        "description" : "",
        "operationId" : "getBusinessHourProfileForDeviceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BusinessHourProfileBean"
            }
          },
          "404" : {
            "description" : "The device or polling profile could not be found"
          }
        }
      }
    },
    "/v1/devices/{id}/links" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns links associated with the device.",
        "description" : "",
        "operationId" : "getLinksForDeviceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "hops",
          "in" : "query",
          "description" : "Number of hops away from the source device to include in the links output",
          "required" : false,
          "type" : "integer",
          "default" : 1,
          "format" : "int32"
        }, {
          "name" : "incPhysical",
          "in" : "query",
          "description" : "Whether to include physical links in the response",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "incLogical",
          "in" : "query",
          "description" : "Whether to include logical links in the response",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "incHealth",
          "in" : "query",
          "description" : "Whether to include endpoint health in response",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "collapseClouds",
          "in" : "query",
          "description" : "Whether to collapse clouds in response",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LinkList"
            }
          },
          "404" : {
            "description" : "The device could not be found"
          }
        }
      }
    },
    "/v1/devices/{id}/groups" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns all of the groups containing the device.",
        "description" : "",
        "operationId" : "getGroupsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type of group to return.",
          "required" : false,
          "type" : "string",
          "enum" : [ "Site", "Group" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GroupList"
            }
          },
          "404" : {
            "description" : "The device could not be found."
          }
        }
      }
    },
    "/v1/devices/{id}" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns the device.",
        "description" : "",
        "operationId" : "getDeviceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Device"
            }
          },
          "404" : {
            "description" : "The device could not be found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Deletes the device",
        "description" : "",
        "operationId" : "deleteDeviceV1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "excludeFromDiscovery",
          "in" : "query",
          "description" : "Exclude deleted device from future Discovery.",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        } ],
        "responses" : {
          "202" : {
            "description" : "The request has been accepted."
          },
          "404" : {
            "description" : "The device could not be found."
          }
        }
      },
      "patch" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Updates a device.",
        "description" : "",
        "operationId" : "updateDeviceV1",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Device",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModifiableDevice"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Request was valid and has been accepted for processing."
          },
          "404" : {
            "description" : "The device could not be found."
          },
          "422" : {
            "description" : "Request was not valid, the device will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the device was not updated."
          }
        }
      }
    },
    "/v1/devices/{id}/interfaces" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns the interfaces on the device.",
        "description" : "",
        "operationId" : "getInterfacesOnDeviceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "deviceIds",
          "in" : "query",
          "description" : "Exclude any interfaces not contained by the device(s) with the given ID(s).",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "deviceIp",
          "in" : "query",
          "description" : "Only include interfaces contained by the device(s) with the given IP.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "interfaceIds",
          "in" : "query",
          "description" : "Only include interfaces with the given interface IDs.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "interfaceIp",
          "in" : "query",
          "description" : "Only include interfaces with the given IP.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ifIndex",
          "in" : "query",
          "description" : "IfIndex of the interfaces to include in the response.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "polledOnly",
          "in" : "query",
          "description" : "Only include interfaces currently configured for polling",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "pollingOverride",
          "in" : "query",
          "description" : "Only include interfaces with the specified polling override",
          "required" : false,
          "type" : "string",
          "enum" : [ "ALWAYS_POLL", "NEVER_POLL" ]
        }, {
          "name" : "ifSpeedOverride",
          "in" : "query",
          "description" : "Only include interfaces whose ifSpeedIn or ifSpeedOut is set",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/InterfaceList"
            }
          },
          "404" : {
            "description" : "The device could not be found"
          }
        }
      }
    },
    "/v1/devices/{id}/device-access-info" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns the device access info for the device.",
        "description" : "",
        "operationId" : "getDeviceAccessInfoV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DeviceAccessInfo"
            }
          },
          "404" : {
            "description" : "The device could not be found"
          }
        }
      },
      "patch" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Updates the device access info for the device.",
        "description" : "",
        "operationId" : "updateDeviceAccessInfoV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "DeviceAccessInfo",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableDeviceAccessInfoBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DeviceAccessInfo"
            }
          },
          "422" : {
            "description" : "The request was invalid, the device-access-info was not updated."
          },
          "404" : {
            "description" : "The device could not be found."
          }
        }
      }
    },
    "/v1/devices/{id}/archive/{type}/latest" : {
      "get" : {
        "tags" : [ "Archives APIs", "Devices APIs" ],
        "summary" : "Returns latest archiveId of the file type associated with the device.",
        "description" : "",
        "operationId" : "getArchivesForDeviceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "File Type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileTag",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "404" : {
            "description" : "The device could not be found"
          }
        }
      }
    },
    "/v1/devices/{id}/archives" : {
      "get" : {
        "tags" : [ "Archives APIs", "Devices APIs" ],
        "summary" : "Returns archives associated with the device.",
        "description" : "",
        "operationId" : "getArchivesForDevice_1V1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "fileFilter",
          "in" : "query",
          "description" : "File Filter",
          "required" : false,
          "type" : "string",
          "default" : "ALL",
          "enum" : [ "LATEST", "LASTCHANGED", "ALL" ]
        }, {
          "name" : "fileType",
          "in" : "query",
          "description" : "File Type",
          "required" : false,
          "type" : "string",
          "default" : "cfg"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ArchiveList"
            }
          },
          "404" : {
            "description" : "The device could not be found"
          }
        }
      }
    },
    "/v1/devices/{id}/custom-attribute-values" : {
      "get" : {
        "tags" : [ "Devices APIs", "Custom Attributes APIs" ],
        "summary" : "Returns the custom attribute values of the device.",
        "description" : "",
        "operationId" : "getCustomAttributeValuesForDeviceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeValueList"
            }
          }
        }
      }
    },
    "/v2/devices/{id}/ip-slas" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns all of the IP SLAs contained in the device.",
        "description" : "",
        "operationId" : "getIpSlasInDeviceV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "targeted",
          "in" : "query",
          "description" : "Targeted",
          "required" : false,
          "type" : "string",
          "enum" : [ "source", "destination", "both" ]
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "pageId",
          "in" : "query",
          "description" : "Starting element id in the request",
          "required" : false,
          "type" : "string",
          "default" : "0"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          },
          "404" : {
            "description" : "The device could not be found."
          }
        }
      }
    },
    "/v2/devices/{id}/groups" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns all of the groups containing the device.",
        "description" : "",
        "operationId" : "getGroups_1V2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type of group to return.",
          "required" : false,
          "type" : "string",
          "enum" : [ "Site", "Group" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "pageId",
          "in" : "query",
          "description" : "Starting element id in the request",
          "required" : false,
          "type" : "string",
          "default" : "0"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          },
          "404" : {
            "description" : "The device could not be found."
          }
        }
      }
    },
    "/v2/devices/{id}" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns the device.",
        "description" : "",
        "operationId" : "getDevice_1V2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Device"
            }
          },
          "404" : {
            "description" : "The device could not be found"
          }
        }
      }
    },
    "/v2/devices" : {
      "get" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns all of the devices in the data model.",
        "description" : "",
        "operationId" : "getAllDevices_1V2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "pageId",
          "in" : "query",
          "description" : "Starting element id in the request",
          "required" : false,
          "type" : "string",
          "default" : "0"
        }, {
          "name" : "deviceIds",
          "in" : "query",
          "description" : "Device IDs to include in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "deviceIp",
          "in" : "query",
          "description" : "IP of devices to include in the response",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "accessIp",
          "in" : "query",
          "description" : "Access IP of device to include in the response",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          }
        }
      }
    },
    "/v2/devices/{id}/components" : {
      "post" : {
        "tags" : [ "Devices APIs" ],
        "summary" : "Returns all of the model components contained in the device.",
        "description" : "",
        "operationId" : "getModelComponentsV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModelComponentFilterBean"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "pageId",
          "in" : "query",
          "description" : "Starting element id in the request",
          "required" : false,
          "type" : "string",
          "default" : "0"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          },
          "404" : {
            "description" : "The device could not be found."
          }
        }
      }
    },
    "/v2/devices/{id}/archives" : {
      "get" : {
        "tags" : [ "Archives APIs", "Devices APIs" ],
        "summary" : "Returns archives associated with the device.",
        "description" : "",
        "operationId" : "getArchivesForDevice_2V2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "fileFilter",
          "in" : "query",
          "description" : "File Filter",
          "required" : false,
          "type" : "string",
          "default" : "ALL",
          "enum" : [ "LATEST", "LASTCHANGED", "ALL" ]
        }, {
          "name" : "fileType",
          "in" : "query",
          "description" : "File Type",
          "required" : false,
          "type" : "string",
          "default" : "cfg"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ArchiveList"
            }
          },
          "404" : {
            "description" : "The device could not be found"
          }
        }
      }
    },
    "/v1/forecast/profiles/{id}" : {
      "get" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Returns the forecast profile by the specified id.",
        "description" : "",
        "operationId" : "getForecastProfileV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Forecast Profile ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastProfileBean"
            }
          },
          "404" : {
            "description" : "The forecast profile could not be found."
          },
          "500" : {
            "description" : "An error occurred, the forecast profile could not be retrieved."
          }
        }
      },
      "delete" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Deletes the forecast profile by the specified id.",
        "description" : "",
        "operationId" : "deleteForecastProfileV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Forecast Profile ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "202" : {
            "description" : "The profile will be deleted."
          }
        }
      }
    },
    "/v1/forecast/profiles" : {
      "get" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Returns a list of Forecast profiles.",
        "description" : "",
        "operationId" : "getAllForecastProfilesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastProfileBeanList"
            }
          },
          "500" : {
            "description" : "An error occurred, the Forecast profiles could not be retrieved."
          }
        }
      },
      "post" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Creates the specified forecast profile.",
        "description" : "",
        "operationId" : "createForecastProfileV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Forecast Profile",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForecastProfileBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastProfileBean"
            }
          },
          "404" : {
            "description" : "The forecast profile could not be created."
          },
          "422" : {
            "description" : "Request was not valid, the forecast profile will not be created."
          },
          "500" : {
            "description" : "An error occurred, the forecast profile was not created."
          },
          "202" : {
            "description" : "The forecast profile will be created."
          }
        }
      },
      "patch" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Returns the forecast profile updated.",
        "description" : "",
        "operationId" : "updateForecastProfileV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Forecast Profile",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForecastProfileBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastProfileBean"
            }
          },
          "404" : {
            "description" : "The forecast profile could not be found."
          },
          "422" : {
            "description" : "Request was not valid, the forecast profile will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the forecast profile was not updated."
          },
          "202" : {
            "description" : "The forecast profile will be updated."
          }
        }
      }
    },
    "/v1/forecast/defaultProfile" : {
      "get" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Returns the default forecast profile.",
        "description" : "",
        "operationId" : "getDefaultForecastProfileV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastProfileBean"
            }
          },
          "500" : {
            "description" : "An error occurred, the default Forecast profile could not be retrieved."
          }
        }
      },
      "patch" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Updates the default forecast profile.",
        "description" : "",
        "operationId" : "updateDefaultForecastProfileV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Default Forecast Profile",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForecastProfileBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastProfileBean"
            }
          },
          "422" : {
            "description" : "Request was not valid, the default forecast profile will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the default forecast profile was not updated."
          },
          "202" : {
            "description" : "The default forecast profile will be updated."
          }
        }
      }
    },
    "/v1/forecast/swarmConfig" : {
      "get" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Returns the full swarm configuration.",
        "description" : "",
        "operationId" : "getFullForecastSwarmConfigV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastConfiguration"
            }
          },
          "500" : {
            "description" : "An error occurred, the swarm configuration could not be retrieved."
          }
        }
      }
    },
    "/v1/forecast/extractorDefs" : {
      "get" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Returns the forecast extractor definitions.",
        "description" : "",
        "operationId" : "getForecastExtractorDefsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "500" : {
            "description" : "An error occurred, the forecast extractor definitions could not be retrieved."
          }
        }
      },
      "patch" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Updates the forecast extractor definitions.",
        "description" : "",
        "operationId" : "updateForecastExtractorDefsV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Forecast Extractor Definitions",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForecastExtractorDefs"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastExtractorDefs"
            }
          },
          "422" : {
            "description" : "Request was not valid, the forecast extractor definitions will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the forecast extractor definitions was not updated."
          },
          "202" : {
            "description" : "The forecast extractor definitions will be updated."
          }
        }
      }
    },
    "/v1/forecast/extractorDefs/{id}" : {
      "get" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Returns the forecast extractor definition.",
        "description" : "",
        "operationId" : "getForecastExtractorDefs_1V1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastExtractorDef"
            }
          },
          "500" : {
            "description" : "An error occurred, the forecast extractor definition could not be retrieved."
          }
        }
      },
      "delete" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Deletes the forecast extractor definition.",
        "description" : "",
        "operationId" : "deleteForecastExtractorDefV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Forecast Extractor Definition",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForecastExtractorDef"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "boolean"
            }
          },
          "422" : {
            "description" : "Request was not valid, the forecast extractor definition will not be deleted."
          },
          "500" : {
            "description" : "An error occurred, the forecast extractor definition was not deleted."
          },
          "202" : {
            "description" : "The forecast extractor definition will be updated."
          }
        }
      },
      "patch" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Updates the forecast extractor definitions.",
        "description" : "",
        "operationId" : "updateForecastExtractorDefV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Forecast Extractor Definition",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForecastExtractorDef"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastExtractorDef"
            }
          },
          "422" : {
            "description" : "Request was not valid, the forecast extractor definition will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the forecast extractor definition was not updated."
          },
          "202" : {
            "description" : "The forecast extractor definition will be updated."
          }
        }
      }
    },
    "/v1/forecast/defaultComponents" : {
      "get" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Returns the default forecast components.",
        "description" : "",
        "operationId" : "getDefaultForecastComponentsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "500" : {
            "description" : "An error occurred, the default forecast components could not be retrieved."
          }
        }
      }
    },
    "/v1/forecast/defaultComponents/{id}" : {
      "get" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Returns the default forecast components with the specified id.",
        "description" : "",
        "operationId" : "getDefaultForecastComponents_1V1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "500" : {
            "description" : "An error occurred, the default forecast components could not be retrieved."
          }
        }
      },
      "delete" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Deletes the default forecast component.",
        "description" : "",
        "operationId" : "deleteDefaultForecastComponentV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "boolean"
            }
          },
          "422" : {
            "description" : "Request was not valid, the default forecast component will not be deleted."
          },
          "500" : {
            "description" : "An error occurred, the default forecast component will not be deleted."
          },
          "202" : {
            "description" : "The default forecast component will be deleted."
          }
        }
      },
      "patch" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Updates the default forecast component.",
        "description" : "",
        "operationId" : "updateDefaultForecastComponentV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Default Forecast Components",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForecastComponent"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastComponent"
            }
          },
          "422" : {
            "description" : "Request was not valid, the default forecast component will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the default forecast component were not updated."
          },
          "202" : {
            "description" : "The default forecast component will be updated."
          }
        }
      }
    },
    "/v1/forecast/profiles/{profileId}/components/{componentId}" : {
      "get" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Returns the specified forecast component in the specified forecast profile.",
        "description" : "",
        "operationId" : "getForecastComponentV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "profileId",
          "in" : "path",
          "description" : "Forecast Profile ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "componentId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastComponent"
            }
          },
          "422" : {
            "description" : "Request was not valid, the forecast component will not be returned."
          },
          "500" : {
            "description" : "An error occurred, the forecast component was not returned."
          },
          "202" : {
            "description" : "The forecast component will be returned."
          }
        }
      },
      "delete" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Deletes the specified forecast component in the specified forecast profile.",
        "description" : "",
        "operationId" : "deleteForecastComponentV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "profileId",
          "in" : "path",
          "description" : "Forecast Profile ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "componentId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastComponent"
            }
          },
          "422" : {
            "description" : "Request was not valid, the forecast component will not be deleted."
          },
          "500" : {
            "description" : "An error occurred, the forecast component was not deleted."
          },
          "202" : {
            "description" : "The forecast component will be deleted."
          }
        }
      },
      "patch" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Updates the specified forecast component in the specified forecast profile.",
        "description" : "",
        "operationId" : "updateForecastComponentV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "profileId",
          "in" : "path",
          "description" : "Forecast Profile ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "componentId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Forecast Component",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ForecastComponent"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForecastComponent"
            }
          },
          "422" : {
            "description" : "Request was not valid, the forecast component will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the forecast component was not updated."
          },
          "202" : {
            "description" : "The forecast component will be updated."
          }
        }
      }
    },
    "/v1/forecast/algorithms" : {
      "get" : {
        "tags" : [ "Forecast APIs" ],
        "summary" : "Returns a list of supported forecast algorithms.",
        "description" : "",
        "operationId" : "getSupportedForecastAlgorithmsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "SIMPLE", "EXPONENTIAL" ]
              }
            }
          },
          "500" : {
            "description" : "An error occurred, the supported forecast algorithms could not be retrieved."
          }
        }
      }
    },
    "/v2/groups/{id}/access-points" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns all of the access points associated with the deviced in the group.",
        "description" : "",
        "operationId" : "getAccessPointsInGroupV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "traverseSubGroups",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "associatedWapsOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WapList"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v2/groups/{id}/ip-slas" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns all of the IP SLA tests contained by or targetted to the group.",
        "description" : "",
        "operationId" : "getIpSlasInGroupV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "targeted",
          "in" : "query",
          "description" : "Targeted",
          "required" : false,
          "type" : "string",
          "enum" : [ "source", "destination", "both" ]
        }, {
          "name" : "traverseSubGroups",
          "in" : "query",
          "description" : "Should response include Devices from all sub-groups in addition to direct members of the group",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "pageId",
          "in" : "query",
          "description" : "Starting element id in the request",
          "required" : false,
          "type" : "string",
          "default" : "0"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v2/groups/{id}/components" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns all of the model components of type specified from the devices in the group.",
        "description" : "",
        "operationId" : "getModelComponentsOfDevicesInGroupV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "traverseSubGroups",
          "in" : "query",
          "description" : "Should response include components from sub-groups in addition to direct members of the group",
          "required" : false,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Component filter to get the components matching the filter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModelComponentFilterBean"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "pageId",
          "in" : "query",
          "description" : "Starting element id in the request",
          "required" : false,
          "type" : "string",
          "default" : "0"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v2/groups/{id}/devices" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns all of the devices contained by the group.",
        "description" : "",
        "operationId" : "getDevicesInGroupV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "traverseSubGroups",
          "in" : "query",
          "description" : "Should response include Devices from all sub-groups in addition to direct members of the group",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "pageId",
          "in" : "query",
          "description" : "Starting element id in the request",
          "required" : false,
          "type" : "string",
          "default" : "0"
        }, {
          "name" : "deviceIds",
          "in" : "query",
          "description" : "Device IDs to include in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "csv"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v2/groups/{id}/site-gateways" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns the site gateways",
        "description" : "",
        "operationId" : "getSiteGatewaysV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SiteGatewaysBean"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v2/groups" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns all groups.",
        "description" : "",
        "operationId" : "getAllGroupsV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Type of group to return.",
          "required" : false,
          "type" : "string",
          "enum" : [ "Site", "Group" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "pageId",
          "in" : "query",
          "description" : "Starting element id in the request",
          "required" : false,
          "type" : "string",
          "default" : "0"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          }
        }
      }
    },
    "/v2/groups/{id}" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns the group",
        "description" : "",
        "operationId" : "getGroupV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v1/groups/{id}/devices" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns all of the devices contained by the group.",
        "description" : "",
        "operationId" : "getDevicesInGroup_1V1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "traverseSubGroups",
          "in" : "query",
          "description" : "Should response include Devices from all sub-groups in addition to direct members of the group",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "deviceIds",
          "in" : "query",
          "description" : "Device IDs to include in the response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "csv"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DeviceList"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v1/groups/{id}/site-gateways" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns the site gateways",
        "description" : "",
        "operationId" : "getSiteGateways_1V1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SiteGatewaysBean"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v1/groups" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns all groups.",
        "description" : "",
        "operationId" : "getAllGroups_1V1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Type of group to return.",
          "required" : false,
          "type" : "string",
          "enum" : [ "Site", "Group" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GroupList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Creates a new group.",
        "description" : "",
        "operationId" : "createNewGroupV1",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Group to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreatableGroup"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The group will be created."
          },
          "422" : {
            "description" : "The request could not be processed."
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Deletes all groups and/or sites (type = ALL, GROUP, SITE).",
        "description" : "",
        "operationId" : "deleteAllGroupsV1",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "ALL"
        }, {
          "name" : "confirmDeleteAll",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "202" : {
            "description" : "All groups and/or sites will be deleted."
          }
        }
      }
    },
    "/v1/groups/{id}" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns the group",
        "description" : "",
        "operationId" : "getGroup_1V1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Deletes the group.",
        "description" : "",
        "operationId" : "deleteGroupV1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "202" : {
            "description" : "The group will be deleted."
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      },
      "patch" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Updates the group.",
        "description" : "",
        "operationId" : "updateGroupV1",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Group",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableGroup"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The group will be updated."
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v1/groups/{id}/parent-groups" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns all of the groups containing the group.",
        "description" : "",
        "operationId" : "getParentGroupsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type of group to return.",
          "required" : false,
          "type" : "string",
          "enum" : [ "Site", "Group" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GroupList"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v1/groups/{id}/links" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns all of the links associated with devices within the group.",
        "description" : "",
        "operationId" : "getLinksForGroupV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "incPhysical",
          "in" : "query",
          "description" : "Whether to include physical links in the response",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "incLogical",
          "in" : "query",
          "description" : "Whether to include logical links in the response",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "incHealth",
          "in" : "query",
          "description" : "Whether to include endpoint health in response",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "collapseClouds",
          "in" : "query",
          "description" : "Whether to collapse clouds in response",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LinkList"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v1/groups/{id}/custom-attribute-values" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs", "Custom Attributes APIs" ],
        "summary" : "Returns the custom attribute values of the group.",
        "description" : "",
        "operationId" : "getCustomAttributeValuesForGroupV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeValueList"
            }
          }
        }
      }
    },
    "/v1/groups/{id}/sub-groups" : {
      "get" : {
        "tags" : [ "Groups/Sites APIs" ],
        "summary" : "Returns all of the groups contained by the group.",
        "description" : "",
        "operationId" : "getSubGroupsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type of group to return.",
          "required" : false,
          "type" : "string",
          "enum" : [ "Site", "Group" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GroupList"
            }
          },
          "404" : {
            "description" : "The group could not be found."
          }
        }
      }
    },
    "/v1/hosts/{id}" : {
      "get" : {
        "tags" : [ "Hosts APIs" ],
        "summary" : "Returns the host.",
        "description" : "",
        "operationId" : "getHostV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Host"
            }
          },
          "404" : {
            "description" : "The host could not be found"
          }
        }
      }
    },
    "/v1/hosts/{id}/connected-interface" : {
      "get" : {
        "tags" : [ "Hosts APIs" ],
        "summary" : "Returns the interface that is connected to this host.",
        "description" : "",
        "operationId" : "getConnectedInterfaceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Host ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Interface"
            }
          },
          "404" : {
            "description" : "The host could not be found."
          }
        }
      }
    },
    "/v1/hosts" : {
      "get" : {
        "tags" : [ "Hosts APIs" ],
        "summary" : "Returns all of the hosts.",
        "description" : "",
        "operationId" : "getAllHostsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "detectedIPsOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HostList"
            }
          }
        }
      }
    },
    "/v1/hosts/ip/{ip}" : {
      "get" : {
        "tags" : [ "Hosts APIs" ],
        "summary" : "Returns the hosts with IP.",
        "description" : "",
        "operationId" : "getHostsWithIPV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "ip",
          "in" : "path",
          "description" : "Host IP",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "detectedIPsOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HostList"
            }
          }
        }
      }
    },
    "/v1/hosts/ip/{ip}/connected-interface" : {
      "get" : {
        "tags" : [ "Hosts APIs" ],
        "summary" : "Returns the interfaces that are connected to the hosts with IP.",
        "description" : "",
        "operationId" : "getInterfacesConnectedToIPV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "ip",
          "in" : "path",
          "description" : "Host IP",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "detectedIPsOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HostList"
            }
          }
        }
      }
    },
    "/v1/hosts/connected-to-interface/{id}" : {
      "get" : {
        "tags" : [ "Hosts APIs" ],
        "summary" : "Returns the hosts connected to interface with ID.",
        "description" : "",
        "operationId" : "getHostsConnectedToIfcV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Interface Id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "detectedIPsOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HostList"
            }
          }
        }
      }
    },
    "/v1/hosts/connected-to-device/{id}" : {
      "get" : {
        "tags" : [ "Hosts APIs" ],
        "summary" : "Returns the hosts connected to device with ID.",
        "description" : "",
        "operationId" : "getHostsConnectedToDeviceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Device Id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "detectedIPsOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HostList"
            }
          }
        }
      }
    },
    "/v1/interfaces/{id}" : {
      "get" : {
        "tags" : [ "Interfaces APIs" ],
        "summary" : "Returns an interface.",
        "description" : "",
        "operationId" : "getInterfaceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of interface",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Interface"
            }
          },
          "404" : {
            "description" : "The interface could not be found."
          }
        }
      },
      "delete" : {
        "tags" : [ "Interfaces APIs" ],
        "summary" : "Deletes the interface",
        "description" : "",
        "operationId" : "deleteInterfaceV1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Interface ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "202" : {
            "description" : "The request has been accepted."
          },
          "404" : {
            "description" : "The interface could not be found."
          }
        }
      },
      "patch" : {
        "tags" : [ "Interfaces APIs" ],
        "summary" : "Updates the interface.",
        "description" : "",
        "operationId" : "updateInterfaceViaPatchV1",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of interface",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Interface",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableInterface"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The request has been accepted."
          },
          "404" : {
            "description" : "The interface could not be found."
          },
          "422" : {
            "description" : "The request could not be processed."
          }
        }
      }
    },
    "/v1/interfaces/{id}/hosts" : {
      "get" : {
        "tags" : [ "Interfaces APIs" ],
        "summary" : "Returns all the detected IP hosts on the interface.",
        "description" : "",
        "operationId" : "getHostsOnInterfaceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Interface ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "detectedIPsOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "includePollingInfo",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HostList"
            }
          },
          "404" : {
            "description" : "The interface could not be found"
          }
        }
      }
    },
    "/v1/interfaces/{id}/sub-interfaces" : {
      "get" : {
        "tags" : [ "Interfaces APIs" ],
        "summary" : "Returns the sub-interfaces for the interface.",
        "description" : "",
        "operationId" : "getSubInterfacesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Interface ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/InterfaceList"
            }
          },
          "404" : {
            "description" : "The interface could not be found"
          }
        }
      }
    },
    "/v1/interfaces/{id}/custom-attribute-values" : {
      "get" : {
        "tags" : [ "Interfaces APIs", "Custom Attributes APIs" ],
        "summary" : "Returns the custom attribute values of the interface.",
        "description" : "",
        "operationId" : "getCustomAttributeValuesForInterfaceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Interface ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeValueList"
            }
          }
        }
      }
    },
    "/v1/interfaces/{id}/agg-interfaces" : {
      "get" : {
        "tags" : [ "Interfaces APIs" ],
        "summary" : "Returns the aggregated interfaces for the interface.",
        "description" : "",
        "operationId" : "getAggregatedInterfacesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Interface ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/InterfaceList"
            }
          },
          "404" : {
            "description" : "The interface could not be found"
          }
        }
      }
    },
    "/v1/interfaces/{id}/links" : {
      "get" : {
        "tags" : [ "Interfaces APIs" ],
        "summary" : "Returns all of the links associated with the interface.",
        "description" : "",
        "operationId" : "getLinksForInterfaceV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of interface",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "incPhysical",
          "in" : "query",
          "description" : "Whether to include physical links in the response",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "incLogical",
          "in" : "query",
          "description" : "Whether to include logical links in the response",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "incHealth",
          "in" : "query",
          "description" : "Whether to include endpoint health in response",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "collapseClouds",
          "in" : "query",
          "description" : "Whether to collapse clouds in response",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LinkList"
            }
          },
          "404" : {
            "description" : "The interface could not be found"
          }
        }
      }
    },
    "/v2/ip-slas" : {
      "get" : {
        "tags" : [ "IP SLAs APIs" ],
        "summary" : "Returns all of the SLAs in the network model.",
        "description" : "",
        "operationId" : "getAllIpSlasV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "pageId",
          "in" : "query",
          "description" : "Starting element id in the request",
          "required" : false,
          "type" : "string",
          "default" : "0"
        }, {
          "name" : "traverseSubGroups",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "fromGroups",
          "in" : "query",
          "description" : "IP SLAs configured from all the devices belonging to the groups listed.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "toGroups",
          "in" : "query",
          "description" : "IP SLAs targeted to the devices belonging to the groups listed.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "fromDevices",
          "in" : "query",
          "description" : "IP SLAs configured from all the devices listed.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "toDevices",
          "in" : "query",
          "description" : "IP SLAs targeted to the devices listed.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "toAddresses",
          "in" : "query",
          "description" : "IP SLAs target address.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "includeJitter",
          "in" : "query",
          "description" : "Include IP SLA Jitter.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "includeLatency",
          "in" : "query",
          "description" : "Include IP SLA Latency.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "startTime",
          "in" : "query",
          "description" : "IP SLAs with metric from the start time.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "description" : "IP SLAs with metric upto the end time.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "testType",
          "in" : "query",
          "description" : "IP SLAs with the test types listed.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "srcAddresses",
          "in" : "query",
          "description" : "IP SLAs with the source addresses listed.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "srcProtocols",
          "in" : "query",
          "description" : "IP SLAs with the source protocols listed.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "slaNames",
          "in" : "query",
          "description" : "IP SLAs having the names listed.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "srcPorts",
          "in" : "query",
          "description" : "IP SLAs with the source ports listed.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "dstPorts",
          "in" : "query",
          "description" : "IP SLAs with the destination ports listed.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "srcIndexes",
          "in" : "query",
          "description" : "IP SLAs with the indexes listed.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "testTarget",
          "in" : "query",
          "description" : "Specify if the IP SLAs targeted-to/sourced-from the device/group specified",
          "required" : false,
          "type" : "string",
          "enum" : [ "SOURCE", "DESTINATION", "BOTH" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          }
        }
      }
    },
    "/v2/ip-slas/{id}" : {
      "get" : {
        "tags" : [ "IP SLAs APIs" ],
        "summary" : "Returns the IP SLA.",
        "description" : "",
        "operationId" : "getIpSlaV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "IP SLA component ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          }
        }
      }
    },
    "/v1/legal/{packageType}" : {
      "get" : {
        "tags" : [ "Legal APIs" ],
        "summary" : "Returns a file containing the NetIM legal details for the specified type of packages. Package types are JAVA, UBUNTU, or STANDALONE.",
        "description" : "",
        "operationId" : "getLegalDetailsV1",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "packageType",
          "in" : "path",
          "description" : "Software package type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/StreamingOutput"
            }
          },
          "500" : {
            "description" : "Could not return the legal information"
          }
        }
      }
    },
    "/v1/links" : {
      "get" : {
        "tags" : [ "Links APIs" ],
        "summary" : "Returns all of the links.",
        "description" : "",
        "operationId" : "getAllLinksV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "incPhysical",
          "in" : "query",
          "description" : "Whether to include physical links in the response",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "incLogical",
          "in" : "query",
          "description" : "Whether to include logical links in the response",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "incHealth",
          "in" : "query",
          "description" : "Whether to include endpoint health in response",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "collapseClouds",
          "in" : "query",
          "description" : "Whether to collapse clouds in response",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LinkList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Links APIs" ],
        "summary" : "Creates a new link(s).",
        "description" : "",
        "operationId" : "createLinksV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Links",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModifiableLinkList"
          }
        } ],
        "responses" : {
          "207" : {
            "description" : "See response content for per link status.",
            "schema" : {
              "$ref" : "#/definitions/GenericHttpResponseList"
            }
          },
          "422" : {
            "description" : "Request was not valid, no links were created."
          },
          "500" : {
            "description" : "An error occurred, no links were created."
          }
        }
      },
      "delete" : {
        "tags" : [ "Links APIs" ],
        "summary" : "Deletes all links.",
        "description" : "",
        "operationId" : "deleteAllLinksV1",
        "parameters" : [ {
          "name" : "confirmDeleteAll",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "202" : {
            "description" : "The links will be deleted."
          }
        }
      },
      "patch" : {
        "tags" : [ "Links APIs" ],
        "summary" : "Updates the link(s).",
        "description" : "",
        "operationId" : "updateLinksV1",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Link(s)",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableLinkList"
          }
        } ],
        "responses" : {
          "422" : {
            "description" : "Request was not valid, no link was updated."
          },
          "500" : {
            "description" : "An error occurred, no link was updated."
          },
          "207" : {
            "description" : "See response content for per link status.",
            "schema" : {
              "$ref" : "#/definitions/GenericHttpResponseList"
            }
          }
        }
      }
    },
    "/v1/links/{id}" : {
      "get" : {
        "tags" : [ "Links APIs" ],
        "summary" : "Returns the link.",
        "description" : "",
        "operationId" : "getLinkV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Link ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Link"
            }
          },
          "404" : {
            "description" : "The link could not be found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Links APIs" ],
        "summary" : "Deletes the link",
        "description" : "",
        "operationId" : "deleteLinkV1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Link ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "202" : {
            "description" : "The request has been accepted."
          },
          "404" : {
            "description" : "The link could not be found."
          }
        }
      },
      "patch" : {
        "tags" : [ "Links APIs" ],
        "summary" : "Updates the link.",
        "description" : "",
        "operationId" : "updateLinkV1",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Link ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Link",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableLink"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GenericHttpResponseList"
            }
          },
          "422" : {
            "description" : "Request was not valid, link was updated."
          },
          "500" : {
            "description" : "An error occurred, link was updated."
          }
        }
      }
    },
    "/v1/links/{id}/custom-attribute-values" : {
      "get" : {
        "tags" : [ "Links APIs", "Custom Attributes APIs" ],
        "summary" : "Returns the custom attribute values of the link.",
        "description" : "",
        "operationId" : "getCustomAttributeValuesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Link ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CustomAttributeValueList"
            }
          }
        }
      }
    },
    "/v1/cities/{id}" : {
      "get" : {
        "tags" : [ "Locations APIs" ],
        "summary" : "Returns the city given by the provided id.",
        "description" : "",
        "operationId" : "getCityV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "City ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/City"
            }
          },
          "404" : {
            "description" : "The city could not be found."
          }
        }
      }
    },
    "/v1/countries/{id}" : {
      "get" : {
        "tags" : [ "Locations APIs" ],
        "summary" : "Returns the country given by the provided id.",
        "description" : "",
        "operationId" : "getCountryV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Country ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Country"
            }
          },
          "404" : {
            "description" : "The country could not be found."
          }
        }
      }
    },
    "/v1/countries" : {
      "get" : {
        "tags" : [ "Locations APIs" ],
        "summary" : "Returns a list of all known countries.",
        "description" : "",
        "operationId" : "getAllCountriesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CountryList"
            }
          }
        }
      }
    },
    "/v1/countries/{id}/regions" : {
      "get" : {
        "tags" : [ "Locations APIs" ],
        "summary" : "Returns a list of all known regions within the country given by the id.",
        "description" : "",
        "operationId" : "getRegionsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Country ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RegionList"
            }
          },
          "404" : {
            "description" : "The country could not be found."
          }
        }
      }
    },
    "/v1/regions/{id}" : {
      "get" : {
        "tags" : [ "Locations APIs" ],
        "summary" : "Returns the region given by the provided id.",
        "description" : "",
        "operationId" : "getRegionV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Region ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Region"
            }
          },
          "404" : {
            "description" : "The region could not be found."
          }
        }
      }
    },
    "/v1/regions/{id}/cities" : {
      "get" : {
        "tags" : [ "Locations APIs" ],
        "summary" : "Returns a list of all known cities within the region given by the id.",
        "description" : "",
        "operationId" : "getCitiesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Region ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CityList"
            }
          },
          "404" : {
            "description" : "The region could not be found."
          }
        }
      }
    },
    "/v1/metric-classes/{id}/vendors/{vendor}" : {
      "delete" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Deletes a metric class.",
        "description" : "",
        "operationId" : "deleteMetricClassAndVendorV1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Class ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "vendor",
          "in" : "path",
          "description" : "Vendor",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "removeUnusedTablesGroups",
          "in" : "query",
          "description" : "Remove unused mib tables and groups",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "boolean"
            }
          },
          "404" : {
            "description" : "The metric class could not be found."
          }
        }
      }
    },
    "/v1/metric-classes/{id}" : {
      "get" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Returns a metric class.",
        "description" : "",
        "operationId" : "getMetricClassV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Class ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "vendor",
          "in" : "query",
          "description" : "Vendor for populating existing converter config",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MetricClass"
            }
          },
          "404" : {
            "description" : "The metric class could not be found."
          }
        }
      },
      "delete" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Deletes a metric class.",
        "description" : "",
        "operationId" : "deleteMetricClassV1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Class ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "removeUnusedTablesGroups",
          "in" : "query",
          "description" : "Remove unused mib tables and groups",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "boolean"
            }
          },
          "404" : {
            "description" : "The metric class could not be found."
          }
        }
      },
      "patch" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Modifies an existing metric class.",
        "description" : "",
        "operationId" : "updateMetricClassV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Class ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "MetricClassForVendor",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MetricClassForVendor"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MetricClassForVendor"
            }
          },
          "422" : {
            "description" : "Request was not valid, no Metric Class was updated."
          },
          "500" : {
            "description" : "An error occurred, no Metric Class was updated."
          }
        }
      }
    },
    "/v1/metric-classes" : {
      "get" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Returns all metric classes.",
        "description" : "",
        "operationId" : "getAllMetricClassesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "custom",
          "in" : "query",
          "description" : "Filter to custom metric classes",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "snmpPollable",
          "in" : "query",
          "description" : "Filter to snmp pollable",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MetricClassList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Creates a new metric class.",
        "description" : "",
        "operationId" : "createMetricClassV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "MetricClassForVendor",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MetricClassForVendor"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MetricClassForVendor"
            }
          },
          "422" : {
            "description" : "Request was not valid, no Metric Class was created."
          },
          "500" : {
            "description" : "An error occurred, no Metric Class was created."
          }
        }
      }
    },
    "/v1/metric-classes/{id}/vendors" : {
      "get" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Returns the configured vendors for a metric class.",
        "description" : "",
        "operationId" : "getVendorsForMetricClassV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Class ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "custom",
          "in" : "query",
          "description" : "Filter to custom vendors",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "The metric class could not be found."
          }
        }
      }
    },
    "/v1/metric-classes/{id}/vendors/{vendor}/mibtables" : {
      "get" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Returns the collected mib tables for a metric class and vendor.",
        "description" : "",
        "operationId" : "getMibTablesForMetricClassAndVendorV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Class ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "vendor",
          "in" : "path",
          "description" : "Vendor",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MibForMetricClassAndVendor"
            }
          },
          "404" : {
            "description" : "The metric class could not be found."
          }
        }
      }
    },
    "/v1/metric-classes/{id}/mibtables" : {
      "get" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Returns the collected mib tables for a metric class.",
        "description" : "",
        "operationId" : "getMibTablesForMetricClassV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Class ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/MibForMetricClassAndVendor"
              }
            }
          },
          "404" : {
            "description" : "The metric class could not be found."
          }
        }
      }
    },
    "/v1/metric-classes/{id}/vendors/mibtables" : {
      "get" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Returns the collected mib tables for all vendors for a metric class.",
        "description" : "",
        "operationId" : "getVendorsAndMibTablesForMetricClassV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Class ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/definitions/MibForMetricClassAndVendor"
              }
            }
          },
          "404" : {
            "description" : "The metric class could not be found."
          }
        }
      }
    },
    "/v1/metric-classes/mibtables/{mibTable}" : {
      "get" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Returns the details for the specified mib table.",
        "description" : "",
        "operationId" : "getMibTableV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "mibTable",
          "in" : "path",
          "description" : "Mib Table",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MibTable"
            }
          },
          "404" : {
            "description" : "The mib table could not be found."
          }
        }
      }
    },
    "/v1/metric-classes/userdefinedfieldconverters" : {
      "get" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Returns the user defined field converter list",
        "description" : "",
        "operationId" : "getUserDefinedFieldConvertersV1",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserDefinedFieldConverterList"
            }
          },
          "404" : {
            "description" : "The user defined field converter list could not be found."
          }
        }
      }
    },
    "/v1/metric-classes/userdefinedfieldfilter" : {
      "get" : {
        "tags" : [ "Metric Classes APIs" ],
        "summary" : "Returns the user defined field filter config",
        "description" : "",
        "operationId" : "getUserDefinedFieldFilterV1",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserDefinedFieldFilter"
            }
          },
          "404" : {
            "description" : "The user defined field filter config could not be found."
          }
        }
      }
    },
    "/v1/metric-component-filtering/v1/metric-component-filtering/re-init" : {
      "post" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Re-inits the metric component filters configuration from the DB.",
        "description" : "",
        "operationId" : "reInitMetricComponentFilterV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ItemList"
            }
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/metric-component-filtering/v1/metric-component-filtering" : {
      "get" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Returns the list of metric component filters configured.",
        "description" : "",
        "operationId" : "getMetricComponentFiltersV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "minimal",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ItemList"
            }
          }
        }
      }
    },
    "/v1/metric-component-filtering/v1/metric-component-filtering/metric-class/{metricClass}" : {
      "get" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Returns the metric component filters associated to the metric class",
        "description" : "",
        "operationId" : "getMetricComponentFilters_1V1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "metricClass",
          "in" : "path",
          "description" : "Metric Class",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ItemList"
            }
          },
          "404" : {
            "description" : "Metric component filter does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "delete" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Deletes all the metric component filters associated to the specified metric class",
        "description" : "",
        "operationId" : "deleteMetricComponentFiltersV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "metricClass",
          "in" : "path",
          "description" : "Metric Class",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentFilter"
            }
          },
          "404" : {
            "description" : "Metric component filter does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/metric-component-filtering/v1/metric-component-filtering/summary" : {
      "get" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Returns the list of metric component filters summary",
        "description" : "",
        "operationId" : "getMetricComponentFiltersSummaryV1",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ItemList"
            }
          }
        }
      }
    },
    "/v1/metric-component-filtering/v1/metric-component-filtering/{id}" : {
      "get" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Returns the metric component filter associated to the id",
        "description" : "",
        "operationId" : "getMetricComponentFilterV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Component Filter ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentFilterExtn"
            }
          },
          "404" : {
            "description" : "Metric component filter does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "put" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Replaces the metric component filter associated to the id",
        "description" : "",
        "operationId" : "setMetricComponentFilter_1V1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Component Filter ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Component Filter Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComponentFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentFilter"
            }
          },
          "404" : {
            "description" : "Metric component filter does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "delete" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Deletes the metric component filter specified by the id",
        "description" : "",
        "operationId" : "deleteMetricComponentFilter_1V1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Component Filter ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentFilter"
            }
          },
          "404" : {
            "description" : "Metric component filter does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "patch" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Updates the metric component filter associated to the id",
        "description" : "",
        "operationId" : "updateMetricComponentFilterV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Metric Component Filter ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Component Filter Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComponentFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentFilter"
            }
          },
          "404" : {
            "description" : "Metric component filter does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/metric-component-filtering/v1/metric-component-filtering/metric-class/{metricClass}/filter-name/{filterName}" : {
      "post" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Adds a new metric component filter for the metric class",
        "description" : "",
        "operationId" : "createMetricComponentFilterV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "metricClass",
          "in" : "path",
          "description" : "Metric Class",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filterName",
          "in" : "path",
          "description" : "Filter Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Component Filter Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComponentFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentFilter"
            }
          },
          "404" : {
            "description" : "Metric component filter exists."
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "put" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Replaces the metric component filter associated with the metric class",
        "description" : "",
        "operationId" : "setMetricComponentFilterV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "metricClass",
          "in" : "path",
          "description" : "Metric Class",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filterName",
          "in" : "path",
          "description" : "Filter Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Component Filter Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComponentFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentFilter"
            }
          },
          "404" : {
            "description" : "Metric component filter does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "delete" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Deletes the metric component filter with the specified filter name for the specified metric class",
        "description" : "",
        "operationId" : "deleteMetricComponentFilterV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "metricClass",
          "in" : "path",
          "description" : "Metric Class",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filterName",
          "in" : "path",
          "description" : "Filter Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentFilter"
            }
          },
          "404" : {
            "description" : "Metric component filter does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "patch" : {
        "tags" : [ "Metric Component Filtering Config APIs" ],
        "summary" : "Updates the metric component filter associated to the metric class",
        "description" : "",
        "operationId" : "updateMetricComponentFilter_1V1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "metricClass",
          "in" : "path",
          "description" : "Metric Class",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filterName",
          "in" : "path",
          "description" : "Filter Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Component Filter Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ComponentFilter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentFilter"
            }
          },
          "404" : {
            "description" : "Metric component filter does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v2/model-components" : {
      "post" : {
        "tags" : [ "Model Components APIs" ],
        "summary" : "Returns all of the model components in the network model.",
        "description" : "",
        "operationId" : "getAllEnhancedModelComponentsV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "pageId",
          "in" : "query",
          "description" : "Starting element id in the request",
          "required" : false,
          "type" : "string",
          "default" : "0"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Component filter to get the components matching the filter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModelComponentFilterBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          }
        }
      }
    },
    "/v2/model-components/{id}" : {
      "get" : {
        "tags" : [ "Model Components APIs" ],
        "summary" : "Returns the model component.",
        "description" : "",
        "operationId" : "getModelComponentV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Model Component ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CursorItemList"
            }
          }
        }
      }
    },
    "/v2/model-components-search" : {
      "post" : {
        "tags" : [ "Model Components Search APIs" ],
        "summary" : "Returns all of the model components in the network model.",
        "description" : "",
        "operationId" : "getAllEnhancedModelComponentsHierarchyV2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ModelComponentHierarchyFilterBean"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/v1/net-auditor/org-policy/policy-groups/{devDrv}/{fileType}/{policyGroup}" : {
      "get" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Returns the NetAuditor template checking configuration policy groups ",
        "description" : "",
        "operationId" : "getNetAuditorOrgPolicyGroupsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policyGroup",
          "in" : "path",
          "description" : "Policy Group Name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileType",
          "in" : "path",
          "description" : "File Type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrgPolicyGroupDTO"
            }
          },
          "404" : {
            "description" : "Org policy group configuration does not exist."
          }
        }
      },
      "post" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Adds a new NetAuditor policy group configuration for the vendor/fileType and returns the added configuration",
        "description" : "",
        "operationId" : "createNetAuditorOrgPolicyGroupConfigsV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileType",
          "in" : "path",
          "description" : "File Type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policyGroup",
          "in" : "path",
          "description" : "Policy Group Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Policy doc config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OrgPolicyGroupDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrgPolicyGroupDTO"
            }
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "put" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Adds a new NetAuditor policy group configuration for the vendor/fileType and returns the added configuration",
        "description" : "",
        "operationId" : "setNetAuditorOrgPolicyGroupConfigsV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileType",
          "in" : "path",
          "description" : "File Type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policyGroup",
          "in" : "path",
          "description" : "Policy Group Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Policy doc config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OrgPolicyGroupDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrgPolicyGroupDTO"
            }
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "delete" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Resets the NetAuditor template checking configuration for the vendor/fileType to default configuration",
        "description" : "",
        "operationId" : "deleteNetAuditorOrgPolicyGroupConfigsV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileType",
          "in" : "path",
          "description" : "File Type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policyGroup",
          "in" : "path",
          "description" : "Policy Group Name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrgPolicyGroupDTO"
            }
          },
          "404" : {
            "description" : "Org policy configuration does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "patch" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Updates the NetAuditor policy group configuration for the vendor/fileType and returns the updated configuration",
        "description" : "",
        "operationId" : "updateNetAuditorOrgPolicyGroupConfigsV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileType",
          "in" : "path",
          "description" : "File Type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policyGroup",
          "in" : "path",
          "description" : "Policy Group Name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Policy doc config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OrgPolicyGroupDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrgPolicyGroupDTO"
            }
          },
          "404" : {
            "description" : "Org policy configuration does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/net-auditor/org-policy/{devDrv}/{fileType}" : {
      "get" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Returns the NetAuditor template checking configuration to the vendor and the file type",
        "description" : "",
        "operationId" : "getNetAuditorOrgPolicyConfigsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileType",
          "in" : "path",
          "description" : "File Type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "default",
          "in" : "query",
          "description" : "Get default org policy configuration",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrgPolicyDocDTO"
            }
          },
          "404" : {
            "description" : "Org policy configuration does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "put" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Adds a new NetAuditor template checking configuration for the vendor/fileType and returns the added configuration",
        "description" : "",
        "operationId" : "setNetAuditorOrgPolicyConfigsV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileType",
          "in" : "path",
          "description" : "File Type",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Policy doc config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OrgPolicyDocDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrgPolicyDocDTO"
            }
          },
          "400" : {
            "description" : "Invalid input."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "delete" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Resets the NetAuditor template checking configuration for the vendor/fileType to default configuration",
        "description" : "",
        "operationId" : "deleteNetAuditorOrgPolicyConfigsV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileType",
          "in" : "path",
          "description" : "File Type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ItemList"
            }
          },
          "404" : {
            "description" : "Org policy configuration does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "patch" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Updates the NetAuditor template checking configuration for the vendor/fileType and returns the updated configuration",
        "description" : "",
        "operationId" : "updateNetAuditorOrgPolicyConfigsV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileType",
          "in" : "path",
          "description" : "File Type",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Policy doc config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OrgPolicyDocDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrgPolicyDocDTO"
            }
          },
          "404" : {
            "description" : "Org policy configuration does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/net-auditor/org-policy/{devDrv}" : {
      "get" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Returns the NetAuditor template checking configuration associated to the vendor",
        "description" : "",
        "operationId" : "getNetAuditorOrgPolicyConfigs_1V1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ItemList"
            }
          },
          "404" : {
            "description" : "Org policy configuration does not exist."
          },
          "400" : {
            "description" : "Request could not be processed."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/net-auditor/org-policy" : {
      "get" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Returns the NetAuditor template checking configuration associated to all the vendors and file types",
        "description" : "",
        "operationId" : "getNetAuditorOrgPolicyConfigs_2V1",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ItemList"
            }
          }
        }
      }
    },
    "/v1/net-auditor/org-policy/summary" : {
      "get" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Returns the NetAuditor template checking configuration summary associated to all the vendors and file types",
        "description" : "",
        "operationId" : "getNetAuditorOrgPolicyConfigsSummaryV1",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ItemList"
            }
          }
        }
      }
    },
    "/v1/net-auditor/org-policy/policy-groups/{devDrv}/{fileType}" : {
      "get" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Returns the NetAuditor template checking configuration policy groups ",
        "description" : "",
        "operationId" : "getNetAuditorOrgPolicyGroups_1V1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileType",
          "in" : "path",
          "description" : "File Type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ItemList"
            }
          },
          "404" : {
            "description" : "Org policy configuration does not exist."
          }
        }
      }
    },
    "/v1/net-auditor/org-policy/policy-groups" : {
      "get" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Returns the NetAuditor template checking configuration policy groups ",
        "description" : "",
        "operationId" : "getNetAuditorOrgPolicyGroups_2V1",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ItemList"
            }
          },
          "404" : {
            "description" : "Org policy configuration does not exist."
          }
        }
      }
    },
    "/v1/net-auditor/org-policy/policy-groups/{devDrv}" : {
      "get" : {
        "tags" : [ "NetA Config APIs" ],
        "summary" : "Returns the NetAuditor template checking configuration policy groups ",
        "description" : "",
        "operationId" : "getNetAuditorOrgPolicyGroups_3V1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "devDrv",
          "in" : "path",
          "description" : "Device Driver",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ItemList"
            }
          },
          "404" : {
            "description" : "Org policy configuration does not exist."
          }
        }
      }
    },
    "/v1/notification-examples/{objectType}" : {
      "get" : {
        "tags" : [ "Notification Senders APIs" ],
        "summary" : "Returns the notification example JSON for the specified object type (device, group, path, test, network, or ipsla).",
        "description" : "",
        "operationId" : "getSenderConfigurationV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectType",
          "in" : "path",
          "description" : "Notification object type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SenderConfigurationModel"
            }
          },
          "400" : {
            "description" : "Bad request."
          },
          "404" : {
            "description" : "The notification example could not be found."
          },
          "500" : {
            "description" : "An error occurred, the notification example could not be retrieved."
          }
        }
      }
    },
    "/v1/notification-senders/{id}" : {
      "get" : {
        "tags" : [ "Notification Senders APIs" ],
        "summary" : "Returns the notification sender given by the provided id.",
        "description" : "",
        "operationId" : "getSenderConfiguration_1V1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Sender ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SenderConfigurationModel"
            }
          },
          "404" : {
            "description" : "The notification sender could not be found."
          },
          "500" : {
            "description" : "An error occurred, the notification sender could not be retrieved."
          }
        }
      },
      "delete" : {
        "tags" : [ "Notification Senders APIs" ],
        "summary" : "(ADMIN role required) Deletes a notification sender.",
        "description" : "",
        "operationId" : "deleteSenderConfigurationV1",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "404" : {
            "description" : "The Sender Configuration could not be found."
          },
          "500" : {
            "description" : "Could not delete the Sender Configuration."
          }
        }
      },
      "patch" : {
        "tags" : [ "Notification Senders APIs" ],
        "summary" : "(ADMIN role required) Returns the notification sender updated.",
        "description" : "",
        "operationId" : "updateSenderConfigurationV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of notification sender to be updated ",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Notification Sender attributes",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SenderConfigurationModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SenderConfigurationModel"
            }
          },
          "404" : {
            "description" : "The notification sender could not be found."
          },
          "400" : {
            "description" : "Request was not valid, the notification sender will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the notification sender was not updated."
          },
          "202" : {
            "description" : "The notification sender will be updated."
          }
        }
      }
    },
    "/v1/notification-senders" : {
      "get" : {
        "tags" : [ "Notification Senders APIs" ],
        "summary" : "Returns a list of notification senders.",
        "description" : "",
        "operationId" : "getSenderConfigurationsV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SenderConfigurationModelList"
            }
          },
          "500" : {
            "description" : "An error occurred, the notification senders could not be retrieved."
          }
        }
      },
      "post" : {
        "tags" : [ "Notification Senders APIs" ],
        "summary" : "(ADMIN role required) Creates or tests a notification sender.",
        "description" : "",
        "operationId" : "createSenderConfigurationV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Notification Sender to Add or Test.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SenderConfigurationModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SenderConfigurationModel"
            }
          },
          "400" : {
            "description" : "Request was not valid, the notification sender will not be created."
          },
          "500" : {
            "description" : "Could not create the Notification Sender."
          }
        }
      },
      "patch" : {
        "tags" : [ "Notification Senders APIs" ],
        "summary" : "(ADMIN role required) Set the entire list of notification senders.",
        "description" : "",
        "operationId" : "setSenderConfigurationsV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Notification Sender configurations",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SenderConfigurationModels"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SenderConfigurationModelList"
            }
          },
          "400" : {
            "description" : "Request was not valid, the notification senders will not be saved."
          },
          "500" : {
            "description" : "An error occurred, the notification senders could not be saved."
          }
        }
      }
    },
    "/v1/notification-suppression-configs/{id}" : {
      "get" : {
        "tags" : [ "Notification Suppression Config API" ],
        "summary" : "(ADMIN role required) Returns the detailed notification suppression config.",
        "description" : "",
        "operationId" : "getNotificationSuppressionConfigV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Suppression Config id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NotificationSuppressionConfig"
            }
          },
          "404" : {
            "description" : "The notification suppression config could not be found"
          }
        }
      },
      "put" : {
        "tags" : [ "Notification Suppression Config API" ],
        "summary" : "(ADMIN role required) Updates an existing notification suppression config.",
        "description" : "",
        "operationId" : "updateUsingPutNotificationSuppressionConfigV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Suppression Config Id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Modifiable Notification Suppression Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableNotificationSuppressionConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The notification suppression config has been updated."
          },
          "404" : {
            "description" : "The notification suppression config could not be found."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "delete" : {
        "tags" : [ "Notification Suppression Configs API" ],
        "summary" : "(ADMIN role required) Deletes an existing notification suppression config",
        "description" : "",
        "operationId" : "deleteNotificationSuppressionConfigV1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Suppression Config id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "204" : {
            "description" : "The notification suppression config has been deleted."
          },
          "404" : {
            "description" : "The notification suppression config could not be found."
          }
        }
      },
      "patch" : {
        "tags" : [ "Notification Suppression Config API" ],
        "summary" : "(ADMIN role required) Updates an existing notification suppression config.",
        "description" : "",
        "operationId" : "updateNotificationSuppressionConfigV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Suppression Config Id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Modifiable Notification Supression Config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableNotificationSuppressionConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The notification suppression config has been updated."
          },
          "404" : {
            "description" : "The notification suppression config could not be found."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/notification-suppression-configs" : {
      "get" : {
        "tags" : [ "Notification Suppression Configs API" ],
        "summary" : "(ADMIN role required) Returns all of the notification suppression configs.",
        "description" : "",
        "operationId" : "getAllNotificationSuppressionConfigsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NotificationSuppressionConfigList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Notification Suppression Config API" ],
        "summary" : "(ADMIN role required) Adds a notification suppression config.",
        "description" : "",
        "operationId" : "createNotificationSuppressionConfigV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Notification Suppression Config to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NotificationSuppressionConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NotificationSuppressionConfig"
            }
          },
          "201" : {
            "description" : "The notification suppression config has been added.",
            "schema" : {
              "$ref" : "#/definitions/NotificationSuppressionConfig"
            }
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "delete" : {
        "tags" : [ "Notification Suppression Configs API" ],
        "summary" : "(ADMIN role required) Deletes all notification suppression config",
        "description" : "",
        "operationId" : "deleteNotificationSuppressionConfigsV1",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/notification-template-tags/{id}" : {
      "get" : {
        "tags" : [ "Notification Template Tag API" ],
        "summary" : "(ADMIN role required) Returns the detailed notification template tag.",
        "description" : "",
        "operationId" : "getNotificationTemplateTagV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Template ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NotificationTemplateTag"
            }
          },
          "404" : {
            "description" : "The notification template tag could not be found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Notification Template Tag API" ],
        "summary" : "(ADMIN role required) Deletes an existing notification template tag.",
        "description" : "",
        "operationId" : "deleteNotificationTemplateTagV1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Template Tag ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The notification template tag has been deleted."
          },
          "400" : {
            "description" : "Bad request."
          },
          "404" : {
            "description" : "The notification template tag could not be found."
          }
        }
      },
      "patch" : {
        "tags" : [ "Notification Template Tag API" ],
        "summary" : "(ADMIN role required) Updates an existing notification template tag and its corresponding templates.",
        "description" : "",
        "operationId" : "updateNotificationTemplateTagV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Template Tag ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Modifiable Notification Template Tag",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableNotificationTemplateTag"
          }
        }, {
          "name" : "displayNamePrefix",
          "in" : "query",
          "description" : "Display Name Prefix",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The notification template tag has been updated."
          },
          "400" : {
            "description" : "Bad request."
          },
          "404" : {
            "description" : "The notification template tag could not be found."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/notification-template-tags" : {
      "get" : {
        "tags" : [ "Notification Template Tag API" ],
        "summary" : "(ADMIN role required) Returns all the matching notification template tags.",
        "description" : "",
        "operationId" : "getAllNotificationTemplateTagsV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "notificationType",
          "in" : "query",
          "description" : "Notification Type Filter",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NotificationTemplateList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Notification Template Tag API" ],
        "summary" : "(ADMIN role required) Adds a notification template tag.",
        "description" : "",
        "operationId" : "createNotificationTemplateTagV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Notification Template tag to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NotificationTemplateTag"
          }
        }, {
          "name" : "copyFromTagName",
          "in" : "query",
          "description" : "Copy from Tag Name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "displayNamePrefix",
          "in" : "query",
          "description" : "Display Name Prefix",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NotificationTemplateTag"
            }
          },
          "201" : {
            "description" : "The notification template has been added.",
            "schema" : {
              "$ref" : "#/definitions/NotificationTemplate"
            }
          },
          "400" : {
            "description" : "Bad request."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/notification-templates/{id}" : {
      "get" : {
        "tags" : [ "Notification Template API" ],
        "summary" : "(ADMIN role required) Returns the detailed notification template.",
        "description" : "",
        "operationId" : "getNotificationTemplateV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Template id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "notificationTemplateIncludeOnlyAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be included in the response content.  If left empty, all available attributes will be included. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will cause the minimum set of attributes to be included in the response.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "notificationTemplateExcludeAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be excluded in the response content.  If left empty, no attributes will be excluded. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will be ignored.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NotificationTemplate"
            }
          },
          "404" : {
            "description" : "The notification template could not be found"
          }
        }
      },
      "put" : {
        "tags" : [ "Notification Template API" ],
        "summary" : "(ADMIN role required) Updates an existing notification template.",
        "description" : "",
        "operationId" : "updateUsingPutNotificationTemplateV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Template Id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Modifiable Notification Template",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableNotificationTemplate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The notification template has been updated."
          },
          "404" : {
            "description" : "The notification template could not be found."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "delete" : {
        "tags" : [ "Notification Template API" ],
        "summary" : "(ADMIN role required) Deletes an existing notification template",
        "description" : "",
        "operationId" : "deleteNotificationTemplateV1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Template id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The notification template has been deleted."
          },
          "404" : {
            "description" : "The notification template could not be found."
          }
        }
      },
      "patch" : {
        "tags" : [ "Notification Template API" ],
        "summary" : "(ADMIN role required) Updates an existing notification template.",
        "description" : "",
        "operationId" : "updateNotificationTemplateV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Notification Template Id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Modifiable Notification Template",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableNotificationTemplate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The notification template has been updated."
          },
          "404" : {
            "description" : "The notification template could not be found."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/notification-templates" : {
      "get" : {
        "tags" : [ "Notification Template API" ],
        "summary" : "(ADMIN role required) Returns all of the notification templates.",
        "description" : "",
        "operationId" : "getAllNotificationTemplatesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "notificationTemplateIncludeOnlyAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be included in the response content.  If left empty, all available attributes will be included. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will cause the minimum set of attributes to be included in the response.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "notificationTemplateExcludeAttrs",
          "in" : "query",
          "description" : "A comma-separated list of top-level attributes to be excluded in the response content.  If left empty, no attributes will be excluded. Some attributes will always be returned for minimal completeness of the response. Providing a fake attribute name such as, 'none', will be ignored.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NotificationTemplateList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Notification Template API" ],
        "summary" : "(ADMIN role required) Adds a notification template.",
        "description" : "",
        "operationId" : "createNotificationTemplateV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Notification Template to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NotificationTemplate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NotificationTemplate"
            }
          },
          "201" : {
            "description" : "The notification template has been added.",
            "schema" : {
              "$ref" : "#/definitions/NotificationTemplate"
            }
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v2/pollers-stats" : {
      "get" : {
        "tags" : [ "Pollers Statistics APIs" ],
        "summary" : "Returns all of the pollers' statistics summary.",
        "description" : "",
        "operationId" : "getAllPollerSummariesV2",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PollerSummaryBeanList"
            }
          }
        }
      }
    },
    "/v2/pollers-stats/{name}/{interval}" : {
      "get" : {
        "tags" : [ "Pollers Statistics APIs" ],
        "summary" : "Returns the named poller's statistics of a polling interval in time range.",
        "description" : "",
        "operationId" : "getPollerCycleStatsTimeSeriesV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Poller Name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "interval",
          "in" : "path",
          "description" : "Polling Interval",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PollerCycleStatsTimeSeriesBean"
            }
          },
          "404" : {
            "description" : "The poller-interval instance could not be found"
          }
        }
      }
    },
    "/v2/pollers-stats/{name}" : {
      "get" : {
        "tags" : [ "Pollers Statistics APIs" ],
        "summary" : "Returns the named poller's statistics of a all polling intervals in time range.",
        "description" : "",
        "operationId" : "getPollerCycleStatsTimeSeries_1V2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Poller Name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PollerCycleStatsTimeSeriesBean"
            }
          },
          "404" : {
            "description" : "The poller instance could not be found"
          }
        }
      }
    },
    "/v1/polling-profiles" : {
      "get" : {
        "tags" : [ "Polling APIs" ],
        "summary" : "Returns a list of polling profiles.",
        "description" : "",
        "operationId" : "getAllPollingProfilesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PollingProfileBeanList"
            }
          },
          "500" : {
            "description" : "An error occurred, the polling profiles could not be retrieved."
          }
        }
      }
    },
    "/v1/polling-profiles/{id}" : {
      "get" : {
        "tags" : [ "Polling APIs" ],
        "summary" : "Returns the polling profile given by the provided id.",
        "description" : "",
        "operationId" : "getPollingProfileV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Polling Profile ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PollingProfileBean"
            }
          },
          "404" : {
            "description" : "The polling profile could not be found."
          },
          "500" : {
            "description" : "An error occurred, the polling profile could not be retrieved."
          }
        }
      },
      "patch" : {
        "tags" : [ "Polling APIs" ],
        "summary" : "Returns the polling profile updated.",
        "description" : "",
        "operationId" : "updatePollingProfileV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Polling Profile ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Polling Profile",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModifiablePollingProfileBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ProfileBean"
            }
          },
          "404" : {
            "description" : "The polling profile could not be found."
          },
          "422" : {
            "description" : "Request was not valid, the polling profile will not be updated."
          },
          "500" : {
            "description" : "An error occurred, the polling profile was not updated."
          },
          "202" : {
            "description" : "The polling profile will be updated."
          }
        }
      }
    },
    "/v1/users/{username}/roles" : {
      "get" : {
        "tags" : [ "RBAC API" ],
        "summary" : "Returns the roles granted to the user given by the provided username.",
        "description" : "",
        "operationId" : "getUserRolesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RoleList"
            }
          },
          "403" : {
            "description" : "Not authorized to view the user."
          },
          "404" : {
            "description" : "The user could not be found."
          }
        }
      }
    },
    "/v1/users/{username}/authorities" : {
      "get" : {
        "tags" : [ "RBAC API" ],
        "summary" : "Returns the authorities granted to the user given by the provided username.",
        "description" : "",
        "operationId" : "getUserAuthoritiesV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AuthorityList"
            }
          },
          "403" : {
            "description" : "Not authorized to view the user."
          },
          "404" : {
            "description" : "The user could not be found."
          }
        }
      }
    },
    "/v1/users/{username}" : {
      "get" : {
        "tags" : [ "RBAC API" ],
        "summary" : "Returns the User given by the provided username.",
        "description" : "",
        "operationId" : "getUserV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "403" : {
            "description" : "Not authorized to view the user."
          },
          "404" : {
            "description" : "The user could not be found."
          }
        }
      },
      "put" : {
        "tags" : [ "RBAC API" ],
        "summary" : "Updates a user.",
        "description" : "",
        "operationId" : "updateUserV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User to be updated.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableUser"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "201" : {
            "description" : "The user has been updated."
          },
          "400" : {
            "description" : "Error updating the user."
          },
          "403" : {
            "description" : "Not authorized to update the user."
          },
          "404" : {
            "description" : "The user could not be found."
          },
          "409" : {
            "description" : "Supplied currentPassword does not match (when updating own user)."
          },
          "422" : {
            "description" : "Error updating the user."
          }
        }
      },
      "delete" : {
        "tags" : [ "RBAC API" ],
        "summary" : "(ADMIN role required) Remove a user.",
        "description" : "",
        "operationId" : "deleteUserV1",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "The user has been removed."
          },
          "403" : {
            "description" : "Not authorized to manage users."
          },
          "404" : {
            "description" : "The user could not be found."
          }
        }
      }
    },
    "/v1/users" : {
      "get" : {
        "tags" : [ "RBAC API" ],
        "summary" : "(ADMIN role required) Returns a list of known Users.",
        "description" : "",
        "operationId" : "getUsersV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Type of users to return.",
          "required" : false,
          "type" : "string",
          "enum" : [ "admin", "user" ]
        }, {
          "name" : "logged",
          "in" : "query",
          "description" : "Current login status of the users.",
          "required" : false,
          "type" : "string",
          "enum" : [ "true", "false" ]
        }, {
          "name" : "hidden",
          "in" : "query",
          "description" : "Whether to include hidden users or not.",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserList"
            }
          },
          "403" : {
            "description" : "Not authorized to manage users."
          }
        }
      },
      "post" : {
        "tags" : [ "RBAC API" ],
        "summary" : "(ADMIN role required) Adds a User.",
        "description" : "",
        "operationId" : "addUserV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "User to be added.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableUser"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "201" : {
            "description" : "The User has been added."
          },
          "400" : {
            "description" : "Error adding the user."
          },
          "409" : {
            "description" : "User already exists."
          },
          "403" : {
            "description" : "Not authorized to manage users."
          },
          "422" : {
            "description" : "Error adding the user."
          }
        }
      }
    },
    "/v1/site-gateways" : {
      "get" : {
        "tags" : [ "Site Gateways Relation APIs" ],
        "summary" : "(ADMIN role required) Returns all of the site gateways relations",
        "description" : "",
        "operationId" : "getAllSiteGatewaysV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SiteGatewaysBeanList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Site Gateways Relation APIs" ],
        "summary" : "(ADMIN role required) Adds a site gateways relation.",
        "description" : "",
        "operationId" : "createSiteGatewaysV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Site Gateways relation to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SiteGatewaysBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SiteGatewaysBean"
            }
          },
          "201" : {
            "description" : "The site gateways relation has been added.",
            "schema" : {
              "$ref" : "#/definitions/SiteGatewaysBean"
            }
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "put" : {
        "tags" : [ "Site Gateways Relation APIs" ],
        "summary" : "(ADMIN role required) Updates an existing site gateways relation.",
        "description" : "",
        "operationId" : "updateUsingPutSiteGatewaysRelationV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Modifiable Site Gateways Relation",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ModifiableSiteGatewaysBean"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The site gateways relation has been updated."
          },
          "404" : {
            "description" : "The site gateways relation could not be found."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "delete" : {
        "tags" : [ "Site Gateways Relation APIs" ],
        "summary" : "(ADMIN role required) Deletes all provided site gateways relations",
        "description" : "",
        "operationId" : "deleteSiteGatewaysRelationsV1",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "SiteGatewaysIds",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ObjectIdsBean"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "All provided site gateways will be deleted."
          },
          "404" : {
            "description" : "The site gateways relations could not be found."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "patch" : {
        "tags" : [ "Site Gateways Relation APIs" ],
        "summary" : "(ADMIN role required) Updates multiple existing site gateways relations.",
        "description" : "",
        "operationId" : "updateSiteGatewaysRelationsV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Modifiable Site Gateways Relations",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ModifiableSiteGatewaysBean"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The site gateways relations has been updated."
          },
          "404" : {
            "description" : "The site gateways relations could not be found."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/site-gateways/{id}" : {
      "get" : {
        "tags" : [ "Site Gateways Relation APIs" ],
        "summary" : "(ADMIN role required) Returns the detailed site gateways relation",
        "description" : "",
        "operationId" : "getSiteGatewaysRelationV1",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Site id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SiteGatewaysBean"
            }
          },
          "404" : {
            "description" : "The site gateways relation could not be found"
          }
        }
      },
      "put" : {
        "tags" : [ "Site Gateways Relation APIs" ],
        "summary" : "(ADMIN role required) Updates an existing site gateways relation.",
        "description" : "",
        "operationId" : "updateUsingPutSiteGatewaysV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Site Id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Modifiable Site Gateways Relation",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableSiteGatewaysBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The site gateways relation has been updated."
          },
          "404" : {
            "description" : "The site gateways relation could not be found."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      },
      "delete" : {
        "tags" : [ "Site Gateways Relation APIs" ],
        "summary" : "(ADMIN role required) Deletes an existing site gateways relation",
        "description" : "",
        "operationId" : "deleteSiteGatewaysRelationV1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Site Id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "204" : {
            "description" : "The site gateways relation has been deleted."
          },
          "404" : {
            "description" : "The site gateways relation could not be found."
          }
        }
      },
      "patch" : {
        "tags" : [ "Site Gateways Relation APIs" ],
        "summary" : "(ADMIN role required) Updates an existing site gateways relation.",
        "description" : "",
        "operationId" : "updateSiteGatewaysV1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Site Id",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Modifiable Site Gateways Relation",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifiableSiteGatewaysBean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The site gateways relation has been updated."
          },
          "404" : {
            "description" : "The site gateways relation could not be found."
          },
          "422" : {
            "description" : "Request could not be processed."
          }
        }
      }
    },
    "/v1/user-audit" : {
      "get" : {
        "tags" : [ "User Audit Events APIs" ],
        "operationId" : "getStatusV1",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "type" : "string"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User Audit Events APIs" ],
        "summary" : "Calls the refresh method for NetIM Core to reread the mappings file.",
        "description" : "",
        "operationId" : "refreshSeverityMappingsV1",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v2/access-points/{id}" : {
      "get" : {
        "tags" : [ "Waps APIs" ],
        "summary" : "Returns the wap.",
        "description" : "",
        "operationId" : "getWapV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "WAP ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "associatedWapsOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Wap"
            }
          },
          "404" : {
            "description" : "The wap could not be found"
          }
        }
      }
    },
    "/v2/access-points" : {
      "get" : {
        "tags" : [ "Waps APIs" ],
        "summary" : "Returns all of the waps.",
        "description" : "",
        "operationId" : "getAllWapsV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of elements in the response",
          "required" : false,
          "type" : "integer",
          "default" : 5000,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of elements to skip in the response",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "associatedWapsOnly",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WapList"
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "basicAuth" : {
      "type" : "basic"
    }
  },
  "definitions" : {
    "AlertComponentFilter" : {
      "type" : "object",
      "properties" : {
        "componentName" : {
          "type" : "string"
        },
        "matchingRegex" : {
          "type" : "string"
        }
      }
    },
    "AlertProfile" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "creationTimeStamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedTimeStamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "applyToAllDevices" : {
          "type" : "boolean"
        },
        "deviceAccessInfoIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "alertThresholds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Threshold"
          }
        },
        "schedule" : {
          "$ref" : "#/definitions/AlertSchedule"
        },
        "isHealthProfile" : {
          "type" : "boolean"
        },
        "groupIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "testIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "filterIfTypes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "filterExpressions" : {
          "$ref" : "#/definitions/FilterExpressions"
        },
        "violationCountForAlert" : {
          "type" : "integer",
          "format" : "int64"
        },
        "countForReturnToNormal" : {
          "type" : "integer",
          "format" : "int64"
        },
        "default" : {
          "type" : "boolean"
        },
        "active" : {
          "type" : "boolean"
        },
        "profileIdFormatted" : {
          "type" : "string"
        },
        "profileNameAndIdFormatted" : {
          "type" : "string"
        },
        "profileNameFormatted" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        },
        "notifications" : {
          "$ref" : "#/definitions/AlertProfileNotificationModelsV2"
        }
      }
    },
    "AlertProfileNotificationModelsV1" : {
      "type" : "object",
      "properties" : {
        "emailNotification" : {
          "$ref" : "#/definitions/EmailAlertProfileNotificationModelV1"
        },
        "slackNotification" : {
          "$ref" : "#/definitions/SlackAlertProfileNotificationModelV1"
        },
        "syslogNotification" : {
          "$ref" : "#/definitions/SyslogAlertProfileNotificationModelV1"
        },
        "snmpNotification" : {
          "$ref" : "#/definitions/TrapAlertProfileNotificationModelV1"
        },
        "splunkNotification" : {
          "$ref" : "#/definitions/SplunkAlertProfileNotificationModelV1"
        },
        "snowNotification" : {
          "$ref" : "#/definitions/SnowAlertProfileNotificationModelV1"
        },
        "triggerThreshold" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xMattersNotification" : {
          "$ref" : "#/definitions/XMattersAlertProfileNotificationModelV1"
        }
      }
    },
    "AlertSchedule" : {
      "type" : "object",
      "properties" : {
        "startHr" : {
          "type" : "integer",
          "format" : "int32"
        },
        "stopHr" : {
          "type" : "integer",
          "format" : "int32"
        },
        "startMin" : {
          "type" : "integer",
          "format" : "int32"
        },
        "stopMin" : {
          "type" : "integer",
          "format" : "int32"
        },
        "days" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
          }
        }
      }
    },
    "EmailAlertProfileNotificationModelV1" : {
      "type" : "object",
      "properties" : {
        "receipients" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "active" : {
          "type" : "boolean"
        },
        "mode" : {
          "type" : "string"
        },
        "disableRtnN" : {
          "type" : "boolean"
        },
        "disableSN" : {
          "type" : "boolean"
        }
      }
    },
    "FilterExpression" : {
      "type" : "object",
      "properties" : {
        "filterExpressionType" : {
          "type" : "string",
          "enum" : [ "DEVICE", "INTERFACE", "NETWORK", "GROUP", "TEST", "PATH" ]
        },
        "active" : {
          "type" : "boolean"
        },
        "expressions" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "FilterExpressions" : {
      "type" : "object",
      "properties" : {
        "filterExpressionTypeSetMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/FilterExpression"
          }
        }
      }
    },
    "ResourceLink" : {
      "type" : "object",
      "properties" : {
        "self" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "string",
            "format" : "uri"
          }
        }
      }
    },
    "SlackAlertProfileNotificationModelV1" : {
      "type" : "object",
      "properties" : {
        "webHooks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "active" : {
          "type" : "boolean"
        },
        "mode" : {
          "type" : "string"
        },
        "disableRtnN" : {
          "type" : "boolean"
        },
        "disableSN" : {
          "type" : "boolean"
        }
      }
    },
    "SnowAlertProfileNotificationModelV1" : {
      "type" : "object",
      "properties" : {
        "active" : {
          "type" : "boolean"
        },
        "mode" : {
          "type" : "string"
        },
        "disableRtnN" : {
          "type" : "boolean"
        },
        "disableSN" : {
          "type" : "boolean"
        }
      }
    },
    "SplunkAlertProfileNotificationModelV1" : {
      "type" : "object",
      "properties" : {
        "active" : {
          "type" : "boolean"
        },
        "mode" : {
          "type" : "string"
        },
        "disableRtnN" : {
          "type" : "boolean"
        },
        "disableSN" : {
          "type" : "boolean"
        }
      }
    },
    "SyslogAlertProfileNotificationModelV1" : {
      "type" : "object",
      "properties" : {
        "active" : {
          "type" : "boolean"
        },
        "mode" : {
          "type" : "string"
        },
        "disableRtnN" : {
          "type" : "boolean"
        },
        "disableSN" : {
          "type" : "boolean"
        }
      }
    },
    "Threshold" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "metricClassId" : {
          "type" : "string"
        },
        "metricId" : {
          "type" : "string"
        },
        "minor" : {
          "type" : "string"
        },
        "major" : {
          "type" : "string"
        },
        "critical" : {
          "type" : "string"
        },
        "operator" : {
          "$ref" : "#/definitions/ThresholdOperator"
        },
        "alertComponentFilter" : {
          "$ref" : "#/definitions/AlertComponentFilter"
        },
        "algorithm" : {
          "$ref" : "#/definitions/ThresholdAlgorithm"
        }
      }
    },
    "ThresholdAlgorithm" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayString" : {
          "type" : "string"
        }
      }
    },
    "ThresholdOperator" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "TrapAlertProfileNotificationModelV1" : {
      "type" : "object",
      "properties" : {
        "active" : {
          "type" : "boolean"
        },
        "mode" : {
          "type" : "string"
        },
        "disableRtnN" : {
          "type" : "boolean"
        },
        "disableSN" : {
          "type" : "boolean"
        }
      }
    },
    "XMattersAlertProfileNotificationModelV1" : {
      "type" : "object",
      "properties" : {
        "webHooks" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "active" : {
          "type" : "boolean"
        },
        "mode" : {
          "type" : "string"
        },
        "disableRtnN" : {
          "type" : "boolean"
        },
        "disableSN" : {
          "type" : "boolean"
        }
      }
    },
    "ModifiableAlertProfileV1" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "applyToAllDevices" : {
          "type" : "boolean"
        },
        "addDeviceAccessInfoIds" : {
          "type" : "array",
          "description" : "List of deviceAccessInfoIds to add to this polling profile",
          "items" : {
            "type" : "string"
          }
        },
        "removeDeviceAccessInfoIds" : {
          "type" : "array",
          "description" : "List of deviceAccessInfoIds to remove from this polling profile",
          "items" : {
            "type" : "string"
          }
        },
        "alertThresholds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Threshold"
          }
        },
        "schedule" : {
          "$ref" : "#/definitions/AlertSchedule"
        },
        "isHealthProfile" : {
          "type" : "boolean"
        },
        "groupIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "testIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "filterIfTypes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "filterExpressions" : {
          "$ref" : "#/definitions/FilterExpressions"
        },
        "violationCountForAlert" : {
          "type" : "integer",
          "format" : "int64"
        },
        "countForReturnToNormal" : {
          "type" : "integer",
          "format" : "int64"
        },
        "active" : {
          "type" : "boolean"
        },
        "profileIdFormatted" : {
          "type" : "string"
        },
        "profileNameAndIdFormatted" : {
          "type" : "string"
        },
        "profileNameFormatted" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        },
        "notifications" : {
          "$ref" : "#/definitions/AlertProfileNotificationModelsV1"
        }
      }
    },
    "AlertProfileBeanListV1" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AlertProfile"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "ListMeta" : {
      "type" : "object",
      "properties" : {
        "total" : {
          "type" : "integer",
          "format" : "int32"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "limit" : {
          "type" : "integer",
          "format" : "int32"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32"
        },
        "next_offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "prev_offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        }
      }
    },
    "CreatableAlertProfileV1" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string"
        },
        "applyToAllDevices" : {
          "type" : "boolean"
        },
        "deviceAccessInfoIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "alertThresholds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Threshold"
          }
        },
        "schedule" : {
          "$ref" : "#/definitions/AlertSchedule"
        },
        "isHealthProfile" : {
          "type" : "boolean"
        },
        "groupIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "testIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "filterIfTypes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "filterExpressions" : {
          "$ref" : "#/definitions/FilterExpressions"
        },
        "violationCountForAlert" : {
          "type" : "integer",
          "format" : "int64"
        },
        "countForReturnToNormal" : {
          "type" : "integer",
          "format" : "int64"
        },
        "active" : {
          "type" : "boolean"
        },
        "profileIdFormatted" : {
          "type" : "string"
        },
        "profileNameAndIdFormatted" : {
          "type" : "string"
        },
        "profileNameFormatted" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        },
        "notifications" : {
          "$ref" : "#/definitions/AlertProfileNotificationModelsV1"
        }
      }
    },
    "AlertProfileNotificationModelV2" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "templateTag" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "mode" : {
          "type" : "string"
        },
        "disableRtnN" : {
          "type" : "boolean"
        },
        "disableSN" : {
          "type" : "boolean"
        },
        "senderId" : {
          "type" : "string"
        }
      }
    },
    "AlertProfileNotificationModelsV2" : {
      "type" : "object",
      "properties" : {
        "alertProfileNotificationModelV2s" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AlertProfileNotificationModelV2"
          }
        },
        "triggerThreshold" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "EmailAlertNotificationModelV2" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertProfileNotificationModelV2"
      }, {
        "type" : "object",
        "properties" : {
          "recipients" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "IQAlertNotificationModelV2" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertProfileNotificationModelV2"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "SlackAlertProfileNotificationModelV2" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertProfileNotificationModelV2"
      }, {
        "type" : "object",
        "properties" : {
          "webHooks" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "SnowAlertNotificationModelV2" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertProfileNotificationModelV2"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "SplunkAlertNotificationModelV2" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertProfileNotificationModelV2"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "SyslogAlertNotificationModelV2" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertProfileNotificationModelV2"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "TrapAlertNotificationModelV2" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertProfileNotificationModelV2"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "WebhookAlertNotificationModelV2" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertProfileNotificationModelV2"
      }, {
        "type" : "object",
        "properties" : {
          "webHooks" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "XMattersAlertProfileNotificationModelV2" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AlertProfileNotificationModelV2"
      }, {
        "type" : "object",
        "properties" : {
          "webHooks" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ModifiableAlertProfileV2" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "applyToAllDevices" : {
          "type" : "boolean"
        },
        "addDeviceAccessInfoIds" : {
          "type" : "array",
          "description" : "List of deviceAccessInfoIds to add to this polling profile",
          "items" : {
            "type" : "string"
          }
        },
        "removeDeviceAccessInfoIds" : {
          "type" : "array",
          "description" : "List of deviceAccessInfoIds to remove from this polling profile",
          "items" : {
            "type" : "string"
          }
        },
        "alertThresholds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Threshold"
          }
        },
        "schedule" : {
          "$ref" : "#/definitions/AlertSchedule"
        },
        "isHealthProfile" : {
          "type" : "boolean"
        },
        "groupIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "testIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "filterIfTypes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "filterExpressions" : {
          "$ref" : "#/definitions/FilterExpressions"
        },
        "violationCountForAlert" : {
          "type" : "integer",
          "format" : "int64"
        },
        "countForReturnToNormal" : {
          "type" : "integer",
          "format" : "int64"
        },
        "active" : {
          "type" : "boolean"
        },
        "profileIdFormatted" : {
          "type" : "string"
        },
        "profileNameAndIdFormatted" : {
          "type" : "string"
        },
        "profileNameFormatted" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        },
        "notifications" : {
          "$ref" : "#/definitions/AlertProfileNotificationModelsV2"
        }
      }
    },
    "AlertProfileBeanListV2" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AlertProfile"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "CreatableAlertProfileV2" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string"
        },
        "applyToAllDevices" : {
          "type" : "boolean"
        },
        "deviceAccessInfoIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "alertThresholds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Threshold"
          }
        },
        "schedule" : {
          "$ref" : "#/definitions/AlertSchedule"
        },
        "isHealthProfile" : {
          "type" : "boolean"
        },
        "groupIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "testIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "filterIfTypes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "filterExpressions" : {
          "$ref" : "#/definitions/FilterExpressions"
        },
        "violationCountForAlert" : {
          "type" : "integer",
          "format" : "int64"
        },
        "countForReturnToNormal" : {
          "type" : "integer",
          "format" : "int64"
        },
        "active" : {
          "type" : "boolean"
        },
        "profileIdFormatted" : {
          "type" : "string"
        },
        "profileNameAndIdFormatted" : {
          "type" : "string"
        },
        "profileNameFormatted" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        },
        "notifications" : {
          "$ref" : "#/definitions/AlertProfileNotificationModelsV2"
        }
      }
    },
    "StreamingOutput" : {
      "type" : "object"
    },
    "Archive" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "deviceId" : {
          "type" : "string"
        },
        "deviceAccessInfoId" : {
          "type" : "string"
        },
        "archiveId" : {
          "type" : "string"
        },
        "fileType" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "source" : {
          "type" : "string"
        },
        "timeCreated" : {
          "type" : "string"
        },
        "lastModified" : {
          "type" : "string"
        },
        "author" : {
          "type" : "string"
        },
        "externalId" : {
          "type" : "string"
        },
        "changeScore" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        },
        "latest" : {
          "type" : "boolean"
        }
      }
    },
    "CustomAttributeDefinition" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "objectTypes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/ObjectType"
          }
        }
      }
    },
    "CustomAttributeValue" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "deviceIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "interfaceIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "linkIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "groupIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "testIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "attributeDefinition" : {
          "$ref" : "#/definitions/CustomAttributeDefinition"
        },
        "value" : {
          "type" : "object"
        }
      }
    },
    "ObjectType" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "promoted" : {
          "type" : "boolean"
        }
      }
    },
    "ModifyCustomAttributeValue" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        }
      }
    },
    "CustomAttributeValueList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CustomAttributeValue"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "NewCustomAttributeValue" : {
      "type" : "object",
      "properties" : {
        "deviceIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "interfaceIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "linkIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "groupIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "testIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "attributeId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "CustomAttributeDefinitionUpdate" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "objectTypes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/ObjectTypeCreateUpdate"
          }
        }
      }
    },
    "ObjectTypeCreateUpdate" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "promoted" : {
          "type" : "boolean"
        }
      }
    },
    "CustomAttributeDefinitionList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CustomAttributeDefinition"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "CustomAttributeDefinitionCreate" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "objectTypes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/ObjectTypeCreateUpdate"
          }
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "BusinessHourProfileBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "applyToAllDevices" : {
          "type" : "boolean"
        },
        "addDeviceAccessInfoIds" : {
          "type" : "array",
          "description" : "List of deviceAccessInfoIds to add to this polling profile",
          "items" : {
            "type" : "string"
          }
        },
        "removeDeviceAccessInfoIds" : {
          "type" : "array",
          "description" : "List of deviceAccessInfoIds to remove from this polling profile",
          "items" : {
            "type" : "string"
          }
        },
        "timeRanges" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TimeRange"
          }
        },
        "groupIds" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "active" : {
          "type" : "boolean"
        },
        "profileIdFormatted" : {
          "type" : "string"
        },
        "profileNameAndIdFormatted" : {
          "type" : "string"
        },
        "profileNameFormatted" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "TimeFrequency" : {
      "type" : "object",
      "properties" : {
        "frequencyOffset" : {
          "type" : "string"
        },
        "frequencyUnit" : {
          "type" : "string"
        },
        "frequency" : {
          "$ref" : "#/definitions/TimeFrequency"
        }
      }
    },
    "TimeRange" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "inclusion" : {
          "type" : "boolean"
        },
        "startTimeHour" : {
          "type" : "integer",
          "format" : "int32"
        },
        "startTimeMinute" : {
          "type" : "integer",
          "format" : "int32"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "dayOffset" : {
          "type" : "string"
        },
        "dayOfUnit" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "frequency" : {
          "$ref" : "#/definitions/TimeFrequency"
        }
      }
    },
    "ProfileBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "creationTimeStamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedTimeStamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "applyToAllDevices" : {
          "type" : "boolean"
        },
        "deviceAccessInfoIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "default" : {
          "type" : "boolean"
        },
        "active" : {
          "type" : "boolean"
        },
        "profileIdFormatted" : {
          "type" : "string"
        },
        "profileNameAndIdFormatted" : {
          "type" : "string"
        },
        "profileNameFormatted" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "BusinessHourProfileBeanList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BusinessHourProfileBean"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "ConfigFileArchiveInfo" : {
      "type" : "object",
      "properties" : {
        "weeksToRetain" : {
          "type" : "string"
        },
        "versionsToRetain" : {
          "type" : "string"
        }
      }
    },
    "DefaultThreshold" : {
      "type" : "object",
      "required" : [ "algorithm", "operator" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "metricClassId" : {
          "type" : "string"
        },
        "metricId" : {
          "type" : "string"
        },
        "minor" : {
          "type" : "string"
        },
        "major" : {
          "type" : "string"
        },
        "critical" : {
          "type" : "string"
        },
        "operator" : {
          "type" : "string"
        },
        "algorithm" : {
          "type" : "string"
        }
      }
    },
    "ModifiableDefaultThreshold" : {
      "type" : "object",
      "required" : [ "algorithm", "operator" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "minor" : {
          "type" : "string"
        },
        "major" : {
          "type" : "string"
        },
        "critical" : {
          "type" : "string"
        },
        "operator" : {
          "type" : "string"
        },
        "algorithm" : {
          "type" : "string"
        }
      }
    },
    "DefaultThresholdList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DefaultThreshold"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "DeviceAccessInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "activeCLIConfigCollection" : {
          "type" : "boolean",
          "description" : "CLI Collection"
        },
        "activeMIBConfigCollection" : {
          "type" : "boolean",
          "description" : "SNMP Collection"
        },
        "cliConfigCollectionStatus" : {
          "type" : "string",
          "description" : "CLI Collection Status"
        },
        "mibConfigCollectionStatus" : {
          "type" : "string",
          "description" : "SNMP Collection Status"
        },
        "activeWMIConfigCollection" : {
          "type" : "boolean",
          "description" : "WMI Collection"
        },
        "wmiConfigCollectionStatus" : {
          "type" : "string",
          "description" : "WMI Collection Status"
        },
        "activeMetricsCollection" : {
          "type" : "boolean",
          "description" : "Metric Collection"
        },
        "activeAWSConfigCollection" : {
          "type" : "boolean",
          "description" : "AWS Collection"
        },
        "sitegateway" : {
          "type" : "boolean",
          "description" : "Site Gateway"
        },
        "description" : {
          "type" : "string"
        },
        "deviceDriver" : {
          "type" : "string"
        },
        "accessAddress" : {
          "type" : "string",
          "description" : "Address (Hostname, FQDN, or IPv4 Address) at which this device can be accessed"
        },
        "cliUsername" : {
          "type" : "string"
        },
        "cliLoginScript" : {
          "type" : "string"
        },
        "cliAccessMethod" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Not Set = 0, Telnet = 1, SSHv1 = 2, SSHv2 = 3"
        },
        "cliConnectionProfileName" : {
          "type" : "string"
        },
        "snmpVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Not Set = 1000, v1 = 0, v2c = 1, SNMPv3 = 3"
        },
        "snmpV3SecurityLevel" : {
          "type" : "string"
        },
        "snmpV3Username" : {
          "type" : "string"
        },
        "snmpV3Context" : {
          "type" : "string"
        },
        "snmpV3ContextId" : {
          "type" : "string"
        },
        "snmpV3AuthProtocol" : {
          "type" : "string"
        },
        "snmpV3PrivacyProtocol" : {
          "type" : "string"
        },
        "wmiUsername" : {
          "type" : "string"
        },
        "wmiDomain" : {
          "type" : "string"
        },
        "awsInstanceId" : {
          "type" : "string"
        },
        "awsAccessKeyId" : {
          "type" : "string"
        },
        "awsRegion" : {
          "type" : "string"
        },
        "extMgmtSrvType" : {
          "type" : "string"
        },
        "extMgmtSrvId" : {
          "type" : "string"
        },
        "extMgmtSrvDevId" : {
          "type" : "string"
        },
        "telemetryOptionEnum" : {
          "type" : "integer",
          "format" : "int32"
        },
        "gnmiAddress" : {
          "type" : "string"
        },
        "gnmiUserName" : {
          "type" : "string"
        },
        "gnmiPassword" : {
          "type" : "string"
        },
        "awsSecretAccessKey" : {
          "type" : "string"
        },
        "snmpV3AuthPassword" : {
          "type" : "string"
        }
      }
    },
    "DeviceAccessInfoList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeviceAccessInfo"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "GenericHttpResponse" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "integer",
          "format" : "int32"
        },
        "mediaType" : {
          "$ref" : "#/definitions/MediaType"
        },
        "entity" : {
          "type" : "object"
        },
        "statusInfo" : {
          "$ref" : "#/definitions/StatusType"
        }
      }
    },
    "GenericHttpResponseList" : {
      "type" : "object",
      "properties" : {
        "responses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GenericHttpResponse"
          }
        }
      }
    },
    "MediaType" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "subtype" : {
          "type" : "string"
        },
        "parameters" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "wildcardType" : {
          "type" : "boolean"
        },
        "wildcardSubtype" : {
          "type" : "boolean"
        }
      }
    },
    "StatusType" : {
      "type" : "object",
      "properties" : {
        "family" : {
          "type" : "string",
          "enum" : [ "INFORMATIONAL", "SUCCESSFUL", "REDIRECTION", "CLIENT_ERROR", "SERVER_ERROR", "OTHER" ]
        },
        "statusCode" : {
          "type" : "integer",
          "format" : "int32"
        },
        "reasonPhrase" : {
          "type" : "string"
        }
      }
    },
    "DeviceAccessInfoFile" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "lines" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "HealthEnum" : {
      "type" : "object",
      "properties" : {
        "healthValue" : {
          "type" : "integer",
          "format" : "int32"
        },
        "healthName" : {
          "type" : "string"
        }
      }
    },
    "Host" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "osType" : {
          "type" : "string"
        },
        "osVersion" : {
          "type" : "string"
        },
        "vendor" : {
          "type" : "string"
        },
        "deviceType" : {
          "type" : "string"
        },
        "src" : {
          "type" : "string"
        },
        "ouiName" : {
          "type" : "string"
        },
        "ipAddress" : {
          "type" : "string"
        },
        "macAddress" : {
          "type" : "string"
        },
        "detectedNodeId" : {
          "type" : "string"
        },
        "connectedInterface" : {
          "$ref" : "#/definitions/Interface"
        },
        "deviceId" : {
          "type" : "string"
        },
        "creationTime" : {
          "type" : "string"
        },
        "updateTime" : {
          "type" : "string"
        },
        "modifiedTime" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "HostList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Host"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "Interface" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "ifName" : {
          "type" : "string"
        },
        "ifPhysAddress" : {
          "type" : "string"
        },
        "ipAddr" : {
          "type" : "string"
        },
        "ipAddresses" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "ifType" : {
          "type" : "string"
        },
        "ifDescr" : {
          "type" : "string"
        },
        "ifSpeed" : {
          "type" : "string"
        },
        "ifSpeedIn" : {
          "type" : "string"
        },
        "ifSpeedOut" : {
          "type" : "string"
        },
        "ifAlias" : {
          "type" : "string"
        },
        "ifHighSpeed" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ifIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ifMtu" : {
          "type" : "string"
        },
        "ifPreferredName" : {
          "type" : "string"
        },
        "preferredName" : {
          "type" : "string"
        },
        "ifPromiscuousMode" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ifOperStatus" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ifAdminStatus" : {
          "type" : "integer",
          "format" : "int32"
        },
        "health" : {
          "$ref" : "#/definitions/HealthEnum"
        },
        "configuredForPolling" : {
          "type" : "boolean",
          "description" : "Is this interface currently configured to be polled?  This takes into account both interface filters as well as manual polling overrides.  If the value is not provided/null then a determination about if it should or should not be polled could not be made."
        },
        "pollingOverride" : {
          "type" : "string",
          "enum" : [ "OFF", "ALWAYS_POLL", "NEVER_POLL" ]
        },
        "customAttributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "Wap" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "apID" : {
          "type" : "string"
        },
        "apName" : {
          "type" : "string"
        },
        "apLocation" : {
          "type" : "string"
        },
        "apIpAddress" : {
          "type" : "string"
        },
        "apMacAddress" : {
          "type" : "string"
        },
        "apEthernetMacAddress" : {
          "type" : "string"
        },
        "apModel" : {
          "type" : "string"
        },
        "apOSVersion" : {
          "type" : "string"
        },
        "apSoftwareVersion" : {
          "type" : "string"
        },
        "apSerialNumber" : {
          "type" : "string"
        },
        "apType" : {
          "type" : "string"
        },
        "apOperationStatus" : {
          "type" : "number",
          "format" : "double"
        },
        "deviceId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "WapList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Wap"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "ObjectIdsBean" : {
      "type" : "object",
      "properties" : {
        "objectIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "PollingProfileBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "creationTimeStamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedTimeStamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "applyToAllDevices" : {
          "type" : "boolean"
        },
        "deviceAccessInfoIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "default" : {
          "type" : "boolean"
        },
        "active" : {
          "type" : "boolean"
        },
        "profileIdFormatted" : {
          "type" : "string"
        },
        "profileNameAndIdFormatted" : {
          "type" : "string"
        },
        "profileNameFormatted" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "EndPoint" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "child" : {
          "$ref" : "#/definitions/EndPoint"
        },
        "health" : {
          "$ref" : "#/definitions/HealthEnum"
        },
        "parentId" : {
          "type" : "string"
        },
        "vendor" : {
          "type" : "string"
        },
        "deviceType" : {
          "type" : "string"
        },
        "ifType" : {
          "type" : "string"
        },
        "ifName" : {
          "type" : "string"
        },
        "ifDescr" : {
          "type" : "string"
        },
        "ifAlias" : {
          "type" : "string"
        },
        "ifSpeed" : {
          "type" : "string"
        },
        "ifPhysAddress" : {
          "type" : "string"
        },
        "ifPreferredName" : {
          "type" : "string"
        },
        "ipAddresses" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "aggIfaces" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "linkType" : {
          "type" : "string"
        },
        "isLocked" : {
          "type" : "boolean"
        },
        "isPhysical" : {
          "type" : "boolean"
        },
        "aggLinks" : {
          "$ref" : "#/definitions/LinkList"
        },
        "endPoints" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EndPoint"
          }
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "LinkList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "Group" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "health" : {
          "$ref" : "#/definitions/HealthEnum"
        },
        "interfaceHealth" : {
          "$ref" : "#/definitions/HealthEnum"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        },
        "sitegateways" : {
          "$ref" : "#/definitions/SiteGatewaysBean"
        },
        "type" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "deviceCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "parentGroupCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "subGroupCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "siteMetadata" : {
          "$ref" : "#/definitions/Site-specific metadata"
        },
        "customAttributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "GroupList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Group"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "Site location" : {
      "type" : "object",
      "properties" : {
        "countryCode" : {
          "type" : "string"
        },
        "regionID" : {
          "type" : "string"
        },
        "city" : {
          "type" : "string"
        },
        "latitude" : {
          "type" : "number",
          "format" : "float"
        },
        "longitude" : {
          "type" : "number",
          "format" : "float"
        }
      }
    },
    "Site-specific metadata" : {
      "type" : "object",
      "properties" : {
        "location" : {
          "$ref" : "#/definitions/Site location"
        },
        "timeZoneID" : {
          "type" : "string"
        },
        "timeZoneDisplayName" : {
          "type" : "string"
        }
      }
    },
    "SiteGatewaysBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "description" : "Description associated with the notification suppression config"
        },
        "gateways" : {
          "type" : "array",
          "description" : "Set of device id's that form the set of gateways for the site",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "siteId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "creationTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "updateTime" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "modifiedTime" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "createdBy" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "Device" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "deviceName" : {
          "type" : "string",
          "description" : "Unique name"
        },
        "accessAddress" : {
          "type" : "string",
          "description" : "Address (Hostname, FQDN, or IPv4 Address) at which this device can be accessed"
        },
        "description" : {
          "type" : "string",
          "description" : "Description for this device"
        },
        "city" : {
          "type" : "string",
          "description" : "ID of the city in which this device is located."
        },
        "regionID" : {
          "type" : "string",
          "description" : "ID of the region in which this device is located."
        },
        "countryCode" : {
          "type" : "string",
          "description" : "ID of the country in which this device is located."
        },
        "timeZone" : {
          "type" : "string"
        },
        "timeZoneDisplayName" : {
          "type" : "string"
        },
        "latitude" : {
          "type" : "number",
          "format" : "float"
        },
        "longitude" : {
          "type" : "number",
          "format" : "float"
        },
        "health" : {
          "$ref" : "#/definitions/HealthEnum"
        },
        "interfaceHealth" : {
          "$ref" : "#/definitions/HealthEnum"
        },
        "deviceType" : {
          "type" : "string"
        },
        "hostname" : {
          "type" : "string"
        },
        "primaryAddress" : {
          "type" : "string"
        },
        "vendor" : {
          "type" : "string"
        },
        "nodeType" : {
          "type" : "string"
        },
        "sysObjectID" : {
          "type" : "string"
        },
        "deviceAccessInfoId" : {
          "type" : "string"
        },
        "sysServices" : {
          "type" : "string"
        },
        "sysDescr" : {
          "type" : "string"
        },
        "prompt" : {
          "type" : "string"
        },
        "sysDomain" : {
          "type" : "string"
        },
        "sysName" : {
          "type" : "string"
        },
        "sysLocation" : {
          "type" : "string"
        },
        "sysContact" : {
          "type" : "string"
        },
        "cityDisplayName" : {
          "type" : "string"
        },
        "regionIDDisplayName" : {
          "type" : "string"
        },
        "countryCodeDisplayName" : {
          "type" : "string"
        },
        "osVersion" : {
          "type" : "string"
        },
        "numInterfaces" : {
          "type" : "integer",
          "format" : "int32"
        },
        "numConnectedHosts" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ifNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "serialNumber" : {
          "type" : "string"
        },
        "ipAddresses" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "customAttributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "sitegateway" : {
          "type" : "boolean"
        },
        "deviceAccessInfo" : {
          "$ref" : "#/definitions/DeviceAccessInfo"
        },
        "configuredForPolling" : {
          "type" : "boolean",
          "description" : "Is this device currently configured to be polled?  If the value is not present/null, then a determination about if it should or should not be polled could not be made."
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "DeviceList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Device"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "ModifiableDevice" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "deviceName" : {
          "type" : "string",
          "description" : "Unique name"
        },
        "accessAddress" : {
          "type" : "string",
          "description" : "Address (Hostname, FQDN, or IPv4 Address) at which this device can be accessed"
        },
        "description" : {
          "type" : "string",
          "description" : "Description for this device"
        },
        "city" : {
          "type" : "string",
          "description" : "ID of the city in which this device is located."
        },
        "regionID" : {
          "type" : "string",
          "description" : "ID of the region in which this device is located."
        },
        "countryCode" : {
          "type" : "string",
          "description" : "ID of the country in which this device is located."
        },
        "timeZone" : {
          "type" : "string",
          "description" : "Time zone in which this device is located."
        },
        "timeZoneDisplayName" : {
          "type" : "string",
          "description" : "Time zone region in which this device is located."
        },
        "deviceAccessInfo" : {
          "$ref" : "#/definitions/ModifiableDeviceAccessInfoBean"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "ModifiableDeviceAccessInfoBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "activeCLIConfigCollection" : {
          "type" : "boolean",
          "description" : "CLI Collection"
        },
        "activeMIBConfigCollection" : {
          "type" : "boolean",
          "description" : "SNMP Collection"
        },
        "cliConfigCollectionStatus" : {
          "type" : "string",
          "description" : "CLI Collection Status"
        },
        "mibConfigCollectionStatus" : {
          "type" : "string",
          "description" : "SNMP Collection Status"
        },
        "activeWMIConfigCollection" : {
          "type" : "boolean",
          "description" : "WMI Collection"
        },
        "wmiConfigCollectionStatus" : {
          "type" : "string",
          "description" : "WMI Collection Status"
        },
        "activeMetricsCollection" : {
          "type" : "boolean",
          "description" : "Metric Collection"
        },
        "activeAWSConfigCollection" : {
          "type" : "boolean",
          "description" : "AWS Collection"
        },
        "sitegateway" : {
          "type" : "boolean",
          "description" : "Site Gateway"
        },
        "description" : {
          "type" : "string"
        },
        "deviceDriver" : {
          "type" : "string"
        },
        "accessAddress" : {
          "type" : "string",
          "description" : "Address (Hostname, FQDN, or IPv4 Address) at which this device can be accessed"
        },
        "cliUsername" : {
          "type" : "string"
        },
        "cliLoginScript" : {
          "type" : "string"
        },
        "cliAccessMethod" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Not Set = 0, Telnet = 1, SSHv1 = 2, SSHv2 = 3"
        },
        "cliConnectionProfileName" : {
          "type" : "string"
        },
        "snmpVersion" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Not Set = 1000, v1 = 0, v2c = 1, SNMPv3 = 3"
        },
        "snmpV3SecurityLevel" : {
          "type" : "string"
        },
        "snmpV3Username" : {
          "type" : "string"
        },
        "snmpV3Context" : {
          "type" : "string"
        },
        "snmpV3ContextId" : {
          "type" : "string"
        },
        "snmpV3AuthProtocol" : {
          "type" : "string"
        },
        "snmpV3PrivacyProtocol" : {
          "type" : "string"
        },
        "wmiUsername" : {
          "type" : "string"
        },
        "wmiDomain" : {
          "type" : "string"
        },
        "awsInstanceId" : {
          "type" : "string"
        },
        "awsAccessKeyId" : {
          "type" : "string"
        },
        "awsRegion" : {
          "type" : "string"
        },
        "extMgmtSrvType" : {
          "type" : "string"
        },
        "extMgmtSrvId" : {
          "type" : "string"
        },
        "extMgmtSrvDevId" : {
          "type" : "string"
        },
        "telemetryOptionEnum" : {
          "type" : "integer",
          "format" : "int32"
        },
        "gnmiAddress" : {
          "type" : "string"
        },
        "gnmiUserName" : {
          "type" : "string"
        },
        "gnmiPassword" : {
          "type" : "string"
        },
        "wmiPassword" : {
          "type" : "string"
        },
        "awsSecretAccessKey" : {
          "type" : "string"
        },
        "cliPassword" : {
          "type" : "string"
        },
        "cliPrivPassword" : {
          "type" : "string"
        },
        "snmpV3Password" : {
          "type" : "string"
        },
        "snmpV3PrivacyPassword" : {
          "type" : "string"
        },
        "snmpCommunityString" : {
          "type" : "string"
        },
        "snmpV3AuthPassword" : {
          "type" : "string"
        }
      }
    },
    "ModifiableDeviceList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ModifiableDevice"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "InterfaceList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Interface"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "ArchiveList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Archive"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "CursorItemList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/CursorListMeta"
        }
      }
    },
    "CursorListMeta" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pageId" : {
          "type" : "string"
        },
        "nextPageId" : {
          "type" : "string"
        }
      }
    },
    "ModelComponentFilterBean" : {
      "type" : "object",
      "required" : [ "componentType" ],
      "properties" : {
        "componentType" : {
          "type" : "string"
        },
        "attributeFilters" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "includeMappingAttributes" : {
          "type" : "boolean"
        },
        "includeGroupMemberships" : {
          "type" : "boolean"
        },
        "includeContainment" : {
          "type" : "boolean"
        }
      }
    },
    "ForecastComponent" : {
      "type" : "object",
      "properties" : {
        "active" : {
          "type" : "boolean"
        },
        "name" : {
          "type" : "string"
        },
        "metricClass" : {
          "type" : "string"
        },
        "metric" : {
          "type" : "string"
        },
        "thresholdType" : {
          "type" : "string"
        },
        "majorTTEThreshold" : {
          "type" : "string"
        },
        "criticalTTEThreshold" : {
          "type" : "string"
        },
        "forecastSettings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ForecastSettingDTO"
          }
        }
      }
    },
    "ForecastProfileBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "creationTimeStamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastModifiedTimeStamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "applyToAllDevices" : {
          "type" : "boolean"
        },
        "addDeviceAccessInfoIds" : {
          "type" : "array",
          "description" : "List of deviceAccessInfoIds to add to this polling profile",
          "items" : {
            "type" : "string"
          }
        },
        "removeDeviceAccessInfoIds" : {
          "type" : "array",
          "description" : "List of deviceAccessInfoIds to remove from this polling profile",
          "items" : {
            "type" : "string"
          }
        },
        "deviceAccessInfoIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "forecastComponents" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ForecastComponent"
          }
        },
        "default" : {
          "type" : "boolean"
        },
        "active" : {
          "type" : "boolean"
        },
        "profileIdFormatted" : {
          "type" : "string"
        },
        "profileNameAndIdFormatted" : {
          "type" : "string"
        },
        "profileNameFormatted" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "ForecastSettingDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "regressionAlgorithm" : {
          "type" : "string"
        },
        "metricDataExtractorType" : {
          "type" : "string"
        }
      }
    },
    "ForecastConfiguration" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lastUpdateTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "forecastProfileDTOMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ForecastProfileDTO"
          }
        },
        "forecastExtractorDefs" : {
          "$ref" : "#/definitions/ForecastExtractorDefs"
        },
        "globalDefaultForecastComponents" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ForecastComponent"
          }
        }
      }
    },
    "ForecastExtractorDef" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "extractorDefMap" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ForecastExtractorDefs" : {
      "type" : "object",
      "properties" : {
        "extractorDefs" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ForecastExtractorDef"
          }
        }
      }
    },
    "ForecastProfileDTO" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "isDefault" : {
          "type" : "boolean"
        },
        "forecastComponentMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ForecastComponent"
          }
        },
        "default" : {
          "type" : "boolean"
        },
        "deviceIdToNodeInfoMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/NodeInfo"
          }
        }
      }
    },
    "NodeInfo" : {
      "type" : "object",
      "properties" : {
        "sysObjId" : {
          "type" : "string"
        },
        "sysDescr" : {
          "type" : "string"
        },
        "timeCreated" : {
          "type" : "integer",
          "format" : "int64"
        },
        "timeUpdated" : {
          "type" : "integer",
          "format" : "int64"
        },
        "operatingSystem" : {
          "type" : "string"
        },
        "lastLogonTimestamp" : {
          "type" : "string"
        },
        "timeZoneID" : {
          "type" : "string"
        },
        "countryCode" : {
          "type" : "string"
        },
        "regionID" : {
          "type" : "string"
        },
        "city" : {
          "type" : "string"
        },
        "postalCode" : {
          "type" : "string"
        },
        "longitude" : {
          "type" : "number",
          "format" : "float"
        },
        "latitude" : {
          "type" : "number",
          "format" : "float"
        },
        "subRegion" : {
          "type" : "string"
        },
        "di" : {
          "type" : "integer",
          "format" : "int64"
        },
        "ui" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sv" : {
          "type" : "integer",
          "format" : "int32"
        },
        "ha" : {
          "type" : "string"
        },
        "pw" : {
          "type" : "string"
        },
        "pp" : {
          "type" : "string"
        },
        "cs" : {
          "type" : "string"
        },
        "nn" : {
          "type" : "string"
        },
        "un" : {
          "type" : "string"
        },
        "rt" : {
          "type" : "string"
        },
        "sn" : {
          "type" : "string"
        },
        "am" : {
          "type" : "integer",
          "format" : "int32"
        },
        "cm" : {
          "type" : "string"
        },
        "av" : {
          "type" : "boolean"
        },
        "DCFC" : {
          "type" : "boolean"
        },
        "DMCI" : {
          "type" : "boolean"
        },
        "MIUI" : {
          "type" : "boolean"
        },
        "DWCI" : {
          "type" : "boolean"
        },
        "adl" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "v3ap" : {
          "type" : "string"
        },
        "v3pp" : {
          "type" : "string"
        },
        "v3cn" : {
          "type" : "string"
        },
        "v3ci" : {
          "type" : "string"
        },
        "v3u" : {
          "type" : "string"
        },
        "v3al" : {
          "type" : "string"
        },
        "v3pl" : {
          "type" : "string"
        },
        "v3sl" : {
          "type" : "string"
        },
        "ssn" : {
          "type" : "string"
        },
        "dn" : {
          "type" : "string"
        },
        "et" : {
          "type" : "boolean"
        },
        "cpn" : {
          "type" : "string"
        },
        "ap" : {
          "type" : "integer",
          "format" : "int32"
        },
        "twofp" : {
          "type" : "string"
        },
        "wmiun" : {
          "type" : "string"
        },
        "wmipw" : {
          "type" : "string"
        },
        "wmidn" : {
          "type" : "string"
        },
        "ext" : {
          "type" : "string"
        },
        "exi" : {
          "type" : "string"
        },
        "exd" : {
          "type" : "string"
        }
      }
    },
    "ForecastProfileBeanList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ForecastProfileBean"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "CreatableGroup" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "addDevices" : {
          "type" : "array",
          "description" : "List of devices (given by ID) to be added to the group.",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "addGroups" : {
          "type" : "array",
          "description" : "List of groups (given by ID) to be added to the group.",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "pushSiteLocationToAddedDevices" : {
          "type" : "boolean",
          "description" : "If devices are being added to the site, whether those devices should be updated to havesame location as this site. This will permanently replace current location of the device. Default - false"
        },
        "pushSiteTZToAddedDevices" : {
          "type" : "boolean",
          "description" : "If devices are being added to the site, whether those devices should be updated to havesame time zone as this site. This will permanently replace, current timezone of the device. Default - false"
        },
        "type" : {
          "type" : "string",
          "description" : "Group = 'User', Site = 'Subnet'",
          "pattern" : "User|Subnet"
        },
        "siteMetadata" : {
          "description" : "Site specific attributes. Only valid for a group of type 'Subnet'",
          "$ref" : "#/definitions/SiteMetadataUpdateBean"
        }
      }
    },
    "SiteLocationBean" : {
      "type" : "object",
      "required" : [ "city", "countryCode", "regionID" ],
      "properties" : {
        "countryCode" : {
          "type" : "string",
          "description" : "Country code of the site"
        },
        "regionID" : {
          "type" : "string",
          "description" : "Region ID of the site"
        },
        "city" : {
          "type" : "string",
          "description" : "City of the site"
        }
      },
      "description" : "Location specifier of a site. Currently, all fields are mandatory. During updates to existing site, empty values are treated as explicitly setting those attributes to null. As a result, if any field is empty all others should be empty as well.Do not provide this type, if you want to leave the location unchanged during updates"
    },
    "SiteMetadataUpdateBean" : {
      "type" : "object",
      "properties" : {
        "location" : {
          "description" : "Location of the site. Non-null value will be used to override existing value during update",
          "$ref" : "#/definitions/SiteLocationBean"
        },
        "timeZoneID" : {
          "type" : "string",
          "description" : "Time Zone ID of the site. Empty string is treated as explicitly setting the value to null during update"
        },
        "pushLocationToAllMemberDevices" : {
          "type" : "boolean",
          "description" : "If true, the current or new location of the site will be copied over to all memberdevices. This will permanently replace all member device's current location. Default - false"
        },
        "pushTZToAllMemberDevices" : {
          "type" : "boolean",
          "description" : "If true, the current or new time zone of the site will be copied over to all memberdevices. This will permanently replace all member device's current time zone. Default - false"
        }
      },
      "description" : "Attributes used to update location/timezone of a site"
    },
    "ModifiableGroup" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "addDevices" : {
          "type" : "array",
          "description" : "List of devices (given by ID) to be added to the group.",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "addGroups" : {
          "type" : "array",
          "description" : "List of groups (given by ID) to be added to the group.",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "pushSiteLocationToAddedDevices" : {
          "type" : "boolean",
          "description" : "If devices are being added to the site, whether those devices should be updated to havesame location as this site. This will permanently replace current location of the device. Default - false"
        },
        "pushSiteTZToAddedDevices" : {
          "type" : "boolean",
          "description" : "If devices are being added to the site, whether those devices should be updated to havesame time zone as this site. This will permanently replace, current timezone of the device. Default - false"
        },
        "removeDevices" : {
          "type" : "array",
          "description" : "List of devices (given by ID) to be removed from the group.",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "removeGroups" : {
          "type" : "array",
          "description" : "List of groups (given by ID) to be removed from the group.",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "siteMetadata" : {
          "description" : "Site specific attributes. Only valid for a group of type 'Subnet'",
          "$ref" : "#/definitions/SiteMetadataUpdateBean"
        }
      }
    },
    "ModifiableInterface" : {
      "type" : "object",
      "properties" : {
        "ifSpeedIn" : {
          "type" : "string"
        },
        "ifSpeedOut" : {
          "type" : "string"
        },
        "pollingOverride" : {
          "type" : "string"
        }
      }
    },
    "ModifiableEndPointBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "child" : {
          "description" : "end point information",
          "$ref" : "#/definitions/ModifiableEndPointBean"
        }
      }
    },
    "ModifiableLink" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "linkType" : {
          "type" : "string"
        },
        "isLocked" : {
          "type" : "boolean"
        },
        "endPoints" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ModifiableEndPointBean"
          }
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "ModifiableLinkList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ModifiableLink"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "City" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "countryId" : {
          "type" : "string"
        },
        "countryName" : {
          "type" : "string"
        },
        "regionId" : {
          "type" : "string"
        },
        "regionName" : {
          "type" : "string"
        },
        "latitude" : {
          "type" : "number",
          "format" : "float"
        },
        "longitude" : {
          "type" : "number",
          "format" : "float"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "Country" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "countryCode" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "CountryList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Country"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "Region" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "regionID" : {
          "type" : "string"
        },
        "countryId" : {
          "type" : "string"
        },
        "countryName" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "RegionList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Region"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "CityList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/City"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "BitSetDataValue" : {
      "type" : "object",
      "properties" : {
        "dvName" : {
          "type" : "string"
        },
        "bitIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "dataString" : {
          "type" : "string"
        }
      }
    },
    "Metric" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "units" : {
          "type" : "string"
        },
        "index" : {
          "type" : "boolean"
        },
        "alertable" : {
          "type" : "boolean"
        },
        "nameExt" : {
          "type" : "boolean"
        },
        "valueEnumMap" : {
          "type" : "object",
          "description" : "Mapping of raw values to their well-known value, if applicable.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "valueBitsetMap" : {
          "type" : "object",
          "description" : "Bitset definition of bit position to value.",
          "additionalProperties" : {
            "$ref" : "#/definitions/BitSetDataValue"
          }
        },
        "converter" : {
          "$ref" : "#/definitions/MetricConverter"
        },
        "componentPart" : {
          "type" : "boolean"
        }
      }
    },
    "MetricClass" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "supportedTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "metrics" : {
          "$ref" : "#/definitions/MetricList"
        },
        "supportedRollups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "MetricConverter" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "converterType" : {
          "type" : "string"
        },
        "fromTable" : {
          "type" : "string"
        },
        "fromOid" : {
          "type" : "string"
        },
        "lookupFromTable" : {
          "type" : "string"
        },
        "lookupFromOid" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "operand1" : {
          "type" : "string"
        },
        "operand2" : {
          "type" : "string"
        },
        "operation" : {
          "type" : "string"
        },
        "fieldValue" : {
          "type" : "string"
        },
        "enumMappings" : {
          "type" : "boolean"
        },
        "mappings" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "defaultValue" : {
          "type" : "string"
        },
        "steps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetricConverter"
          }
        },
        "choices" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetricConverter"
          }
        }
      }
    },
    "MetricList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Metric"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "MetricClassList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetricClass"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "MibForMetricClassAndVendor" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "mibTableToUse" : {
          "type" : "string"
        },
        "primaryTable" : {
          "type" : "string"
        },
        "mibGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MibTableGroup"
          }
        },
        "mibTables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MibTable"
          }
        }
      }
    },
    "MibTable" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "oids" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MibTableOid"
          }
        },
        "mibFiles" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "moduleNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "MibTableGroup" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "mibTables" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "MibTableOid" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "alertable" : {
          "type" : "boolean"
        },
        "description" : {
          "type" : "string"
        },
        "label" : {
          "type" : "string"
        },
        "oidString" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "units" : {
          "type" : "string"
        },
        "indexOidReadable" : {
          "type" : "boolean"
        },
        "numeric" : {
          "type" : "boolean"
        },
        "scalar" : {
          "type" : "boolean"
        },
        "tableColumn" : {
          "type" : "boolean"
        },
        "index" : {
          "type" : "boolean"
        },
        "componentPart" : {
          "type" : "boolean"
        },
        "table" : {
          "type" : "boolean"
        },
        "leaf" : {
          "type" : "boolean"
        },
        "tableEntry" : {
          "type" : "boolean"
        },
        "trap" : {
          "type" : "boolean"
        }
      }
    },
    "UserDefinedFieldConverter" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string"
        },
        "requiredParams" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "optionalParams" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "UserDefinedFieldConverterList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserDefinedFieldConverter"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "UserDefinedFieldFilter" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string"
        },
        "requiredParams" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "optionalParams" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "MetricClassForVendor" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "metricClass" : {
          "$ref" : "#/definitions/MetricClass"
        },
        "vendor" : {
          "type" : "string"
        },
        "mib" : {
          "$ref" : "#/definitions/MibForMetricClassAndVendor"
        },
        "filters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetricFilter"
          }
        }
      }
    },
    "MetricFilter" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "converterType" : {
          "type" : "string"
        },
        "fromTable" : {
          "type" : "string"
        },
        "fromOid" : {
          "type" : "string"
        },
        "lookupFromTable" : {
          "type" : "string"
        },
        "lookupFromOid" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "operand1" : {
          "type" : "string"
        },
        "operand2" : {
          "type" : "string"
        },
        "operation" : {
          "type" : "string"
        },
        "fieldValue" : {
          "type" : "string"
        },
        "enumMappings" : {
          "type" : "boolean"
        },
        "mappings" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "defaultValue" : {
          "type" : "string"
        },
        "steps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetricConverter"
          }
        },
        "choices" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetricConverter"
          }
        },
        "fieldName" : {
          "type" : "string"
        },
        "filterValue" : {
          "type" : "string"
        },
        "condition" : {
          "type" : "string"
        },
        "action" : {
          "type" : "string"
        }
      }
    },
    "ItemList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "ComponentFieldFilter" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string"
        },
        "componentField" : {
          "type" : "string"
        },
        "filters" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ComponentFilter" : {
      "type" : "object",
      "properties" : {
        "filterCondition" : {
          "type" : "string",
          "enum" : [ "match-all", "match-any" ]
        },
        "filterMode" : {
          "type" : "string",
          "enum" : [ "include", "exclude" ]
        },
        "description" : {
          "type" : "string"
        },
        "metricFieldFilters" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ComponentFieldFilter"
          }
        }
      }
    },
    "ComponentFilterExtn" : {
      "type" : "object",
      "properties" : {
        "filterName" : {
          "type" : "string"
        },
        "metricClass" : {
          "type" : "string"
        },
        "lastModified" : {
          "type" : "integer",
          "format" : "int64"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "filterCondition" : {
          "type" : "string",
          "enum" : [ "match-all", "match-any" ]
        },
        "filterMode" : {
          "type" : "string",
          "enum" : [ "include", "exclude" ]
        },
        "description" : {
          "type" : "string"
        },
        "metricFieldFilters" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ComponentFieldFilter"
          }
        },
        "systemDefined" : {
          "type" : "boolean"
        }
      }
    },
    "ModelComponentHierarchyFilterBean" : {
      "type" : "object",
      "properties" : {
        "scopeOeObjIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "scopeIfcObjIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "modelComponentFilterBeanList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ModelComponentFilterBean"
          }
        }
      }
    },
    "OrgPolicyGroupDTO" : {
      "type" : "object",
      "properties" : {
        "deviceDriver" : {
          "type" : "string"
        },
        "fileType" : {
          "type" : "string"
        },
        "userGroup" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "lastModifiedUser" : {
          "type" : "string"
        },
        "lastModifiedTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "policies" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ConstraintDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "fileSectionName" : {
          "type" : "string"
        },
        "matchPattern" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "matchAnyPattern" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "OrgPolicyConstraint" : {
      "type" : "object",
      "properties" : {
        "operator" : {
          "type" : "string",
          "enum" : [ "all", "any", "not_all", "not_any" ]
        },
        "constraints" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "OrgPolicyDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "violationSeverity" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "description" : {
          "type" : "string"
        },
        "fileSectionName" : {
          "type" : "string"
        },
        "policyConstraint" : {
          "$ref" : "#/definitions/OrgPolicyConstraint"
        },
        "filterMatchPattern" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "filterUnMatchPattern" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "matchPattern" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "matchAnyPattern" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "unMatchPattern" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "unMatchAllPattern" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "matchRange" : {
          "type" : "string"
        }
      }
    },
    "OrgPolicyDocDTO" : {
      "type" : "object",
      "properties" : {
        "deviceDriver" : {
          "type" : "string"
        },
        "fileType" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "lastModifiedUser" : {
          "type" : "string"
        },
        "lastModifiedTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "fileSections" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrgPolicyFileSectionDTO"
          }
        },
        "policies" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OrgPolicyDTO"
          }
        },
        "constraints" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConstraintDTO"
          }
        }
      }
    },
    "OrgPolicyFileSectionDTO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "cmdHierarchy" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "maskPattern" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "EmailSenderConfigurationModel" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SenderConfigurationModel"
      }, {
        "type" : "object",
        "properties" : {
          "smtpServer" : {
            "type" : "string"
          },
          "smtpPort" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sender" : {
            "type" : "string"
          },
          "subjectPrefix" : {
            "type" : "string"
          },
          "smtpUsername" : {
            "type" : "string"
          },
          "smtpPassword" : {
            "type" : "string"
          },
          "smtpUseStarttls" : {
            "type" : "boolean"
          },
          "smtpRequireSsl" : {
            "type" : "boolean"
          },
          "smtpEnableSsl" : {
            "type" : "boolean"
          },
          "smtpUseAuthentication" : {
            "type" : "boolean"
          },
          "smtpAuthenticationMethod" : {
            "type" : "string"
          },
          "smtpConnectionSecurity" : {
            "type" : "string"
          },
          "recipients" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "IQSenderConfigurationModel" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SenderConfigurationModel"
      }, {
        "type" : "object",
        "properties" : {
          "tenantName" : {
            "type" : "string"
          },
          "clientID" : {
            "type" : "string"
          },
          "clientSecret" : {
            "type" : "string"
          },
          "optionalTrigger" : {
            "type" : "string"
          },
          "cloudDomain" : {
            "type" : "string"
          },
          "aadUrl" : {
            "type" : "string"
          },
          "authUrl" : {
            "type" : "string"
          },
          "scope" : {
            "type" : "string"
          },
          "webhookUrl" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SenderConfigurationModel" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "test" : {
          "type" : "boolean"
        },
        "error" : {
          "type" : "string"
        },
        "defaultTemplateTag" : {
          "type" : "string"
        }
      }
    },
    "SlackSenderConfigurationModel" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SenderConfigurationModel"
      }, {
        "type" : "object",
        "properties" : {
          "webhookURLs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "Snmpv3USMUser" : {
      "type" : "object",
      "properties" : {
        "userName" : {
          "type" : "string"
        },
        "contextName" : {
          "type" : "string"
        },
        "securityName" : {
          "type" : "string"
        },
        "securityLevel" : {
          "type" : "string",
          "enum" : [ "NO_AUTH_NO_PRIV", "AUTH_NO_PRIV", "AUTH_PRIV" ]
        },
        "authenticationProtocol" : {
          "type" : "string",
          "enum" : [ "SHA", "MD5", "HMAC128_SHA224", "HMAC192_SHA256", "HMAC256_SHA384", "HMAC384_SHA512", "NO_AUTH" ]
        },
        "authenticationPassword" : {
          "type" : "string"
        },
        "privacyProtocol" : {
          "type" : "string",
          "enum" : [ "CBC_DES", "CBC_3DES", "CFB_AES_128", "CFB_AES_192", "CFB_AES_256", "AES_192_3DES_EXT", "AES_256_3DES_EXT", "NO_PRIV" ]
        },
        "privacyPassword" : {
          "type" : "string"
        }
      }
    },
    "SnowSenderConfigurationModel" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SenderConfigurationModel"
      }, {
        "type" : "object",
        "properties" : {
          "server" : {
            "type" : "string"
          },
          "userName" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "protocol" : {
            "type" : "string"
          },
          "authMode" : {
            "type" : "string"
          },
          "clientID" : {
            "type" : "string"
          },
          "clientSecret" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          },
          "refreshToken" : {
            "type" : "string"
          },
          "endPoint" : {
            "type" : "string"
          },
          "authUrl" : {
            "type" : "string"
          },
          "accessTokenUrl" : {
            "type" : "string"
          },
          "scope" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SplunkSenderConfigurationModel" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SenderConfigurationModel"
      }, {
        "type" : "object",
        "properties" : {
          "server" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          },
          "protocol" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          },
          "index" : {
            "type" : "string"
          },
          "endPoint" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SyslogSenderConfigurationModel" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SenderConfigurationModel"
      }, {
        "type" : "object",
        "properties" : {
          "protocol" : {
            "type" : "string"
          },
          "host" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      } ]
    },
    "TrapSenderConfigurationModel" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SenderConfigurationModel"
      }, {
        "type" : "object",
        "properties" : {
          "remoteHost" : {
            "type" : "string"
          },
          "remotePort" : {
            "type" : "integer",
            "format" : "int32"
          },
          "communityString" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string",
            "enum" : [ "v1", "v2c", "v2", "v3" ]
          },
          "v3User" : {
            "$ref" : "#/definitions/Snmpv3USMUser"
          }
        }
      } ]
    },
    "WebhookSenderConfigurationModel" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SenderConfigurationModel"
      }, {
        "type" : "object",
        "properties" : {
          "webhookURLs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "XMattersSenderConfigurationModel" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SenderConfigurationModel"
      }, {
        "type" : "object",
        "properties" : {
          "webhookURLs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "SenderConfigurationModelList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SenderConfigurationModel"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "SenderConfigurationModels" : {
      "type" : "object",
      "properties" : {
        "senderConfigurationModels" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SenderConfigurationModel"
          }
        }
      }
    },
    "Base" : {
      "type" : "object",
      "required" : [ "objectId", "objectType" ],
      "properties" : {
        "objectId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "objectType" : {
          "type" : "string"
        }
      }
    },
    "NotificationSuppressionConfig" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "When true indicates that this notification suppression config is enabled"
        },
        "description" : {
          "type" : "string",
          "description" : "Description associated with the notification suppression config"
        },
        "subject" : {
          "type" : "string",
          "description" : "Template that will be used for the subject section of the notification template for the given notification suppression config"
        },
        "message" : {
          "type" : "string",
          "description" : "Template that will be used for the message section of the notification template for the given notification suppression config"
        },
        "parentChildrenRelation" : {
          "description" : "This is the parent child relationship",
          "$ref" : "#/definitions/ParentChildrenRelation"
        },
        "creationTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "updateTime" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "modifiedTime" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "ParentChildrenRelation" : {
      "type" : "object",
      "required" : [ "childSet", "enabled", "parent" ],
      "discriminator" : "name",
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        },
        "parent" : {
          "$ref" : "#/definitions/Base"
        },
        "childSet" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Base"
          }
        }
      }
    },
    "SiteGatewaysRelation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ParentChildrenRelation"
      }, {
        "type" : "object",
        "properties" : { }
      } ]
    },
    "ModifiableNotificationSuppressionConfig" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "When true indicates that this notification suppression config is enabled"
        },
        "description" : {
          "type" : "string",
          "description" : "Description associated with the notification suppression config"
        },
        "subject" : {
          "type" : "string",
          "description" : "Template that will be used for the subject section of the notification template for the given notification suppression config"
        },
        "message" : {
          "type" : "string",
          "description" : "Template that will be used for the message section of the notification template for the given notification suppression config"
        },
        "parentChildrenRelation" : {
          "description" : "This is the parent child relationship",
          "$ref" : "#/definitions/ParentChildrenRelation"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "NotificationSuppressionConfigList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NotificationSuppressionConfig"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "NotificationTemplateTag" : {
      "type" : "object",
      "required" : [ "notificationType", "tagName" ],
      "properties" : {
        "default" : {
          "type" : "boolean",
          "description" : "When set as the default, it set all of the derived templates as 'default'"
        },
        "id" : {
          "type" : "string"
        },
        "notificationType" : {
          "type" : "string",
          "description" : "The type of notification"
        },
        "tagName" : {
          "type" : "string",
          "description" : "The tag name"
        },
        "systemDefined" : {
          "type" : "boolean",
          "description" : "Specifies if this notification template is system defined that is shipped as part of the install and cannot be modified"
        }
      }
    },
    "NotificationTemplate" : {
      "type" : "object",
      "required" : [ "baseObjectType", "notificationType" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Friendly name associated with the notification template"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "default" : {
          "type" : "boolean",
          "description" : "When set as the default, it unsets any other notification template for that base object type and tag names as non-default"
        },
        "subject" : {
          "type" : "string",
          "description" : "Template that will be used for the subject section of the notification template for the given notification and base object type"
        },
        "message" : {
          "type" : "string",
          "description" : "Template that will be used for the message section of the notification template for the given notification and base object type"
        },
        "notificationType" : {
          "type" : "string",
          "description" : "The type of notification"
        },
        "baseObjectType" : {
          "type" : "string",
          "description" : "The type of base object",
          "enum" : [ "DEVICE", "GROUP", "TEST", "PATH", "NETWORK", "IPSLA", "SITE" ]
        },
        "tagName" : {
          "type" : "string",
          "readOnly" : true
        },
        "systemDefined" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "creationTime" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "updateTime" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "modifiedTime" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "ModifiableNotificationTemplateTag" : {
      "type" : "object",
      "properties" : {
        "default" : {
          "type" : "boolean",
          "description" : "When set as the default, it set all of the derived templates as 'default'"
        }
      }
    },
    "NotificationTemplateList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NotificationTemplate"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "ModifiableNotificationTemplate" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Friendly name associated with the notification template"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "default" : {
          "type" : "boolean",
          "description" : "When set as the default, it unsets any other notification template for that base object type and tag names as non-default"
        },
        "subject" : {
          "type" : "string",
          "description" : "Template that will be used for the subject section of the notification template for the given notification and base object type"
        },
        "message" : {
          "type" : "string",
          "description" : "Template that will be used for the message section of the notification template for the given notification and base object type"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "PollerCycleStatsBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "cycleTimestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalDevices" : {
          "type" : "integer",
          "format" : "int64"
        },
        "avgTotalTime" : {
          "type" : "number",
          "format" : "double"
        },
        "avgWaitingTime" : {
          "type" : "number",
          "format" : "double"
        },
        "avgPollingTime" : {
          "type" : "number",
          "format" : "double"
        },
        "polledIfcs" : {
          "type" : "integer",
          "format" : "int64"
        },
        "generatedMetrics" : {
          "type" : "integer",
          "format" : "int64"
        },
        "generatedSamples" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pollingLoads" : {
          "type" : "integer",
          "format" : "int64"
        },
        "busyPercentage" : {
          "type" : "number",
          "format" : "double"
        },
        "overLoaded" : {
          "type" : "boolean"
        }
      }
    },
    "PollerSummaryBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "interval" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pollerCycleStatsBeanMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/PollerCycleStatsBean"
          }
        },
        "aggregatedPollerStatsBean" : {
          "$ref" : "#/definitions/PollerCycleStatsBean"
        }
      }
    },
    "PollerSummaryBeanList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PollerSummaryBean"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "PollerCycleStatsTimeSeriesBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "pollerName" : {
          "type" : "string"
        },
        "interval" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pollerCycleStatsBeanMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/PollerCycleStatsBean"
          }
        }
      }
    },
    "PollingProfileBeanList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PollingProfileBean"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "ModifiablePollingProfileBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "applyToAllDevices" : {
          "type" : "boolean"
        },
        "addDeviceAccessInfoIds" : {
          "type" : "array",
          "description" : "List of deviceAccessInfoIds to add to this polling profile",
          "items" : {
            "type" : "string"
          }
        },
        "removeDeviceAccessInfoIds" : {
          "type" : "array",
          "description" : "List of deviceAccessInfoIds to remove from this polling profile",
          "items" : {
            "type" : "string"
          }
        },
        "default" : {
          "type" : "boolean"
        },
        "active" : {
          "type" : "boolean"
        },
        "profileIdFormatted" : {
          "type" : "string"
        },
        "profileNameAndIdFormatted" : {
          "type" : "string"
        },
        "profileNameFormatted" : {
          "type" : "string"
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "Role" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "assignable" : {
          "type" : "boolean"
        },
        "authorityNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "RoleList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Role"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "Authority" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "AuthorityList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Authority"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "LastSessionInfo" : {
      "type" : "object",
      "properties" : {
        "loginTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "loginAddress" : {
          "type" : "string"
        },
        "loginServer" : {
          "type" : "string"
        }
      }
    },
    "User" : {
      "type" : "object",
      "properties" : {
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "passwordExpiresAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "canChangePasswordAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "overridePasswordExpiresAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "overrideCanChangePasswordAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sessionTimeout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "overrideSessionTimeout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "temporaryPassword" : {
          "type" : "string"
        },
        "disabled" : {
          "type" : "boolean"
        },
        "localAccess" : {
          "type" : "boolean"
        },
        "allowedLoginMethods" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "lastSession" : {
          "$ref" : "#/definitions/LastSessionInfo"
        },
        "roleNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "authorityNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    },
    "UserList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "ModifiableUser" : {
      "type" : "object",
      "required" : [ "roleNames", "username" ],
      "properties" : {
        "displayName" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "resetPassword" : {
          "type" : "boolean"
        },
        "passwordValidTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "passwordExpiresAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "overridePasswordExpiresAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "overrideCanChangePasswordAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "sessionTimeout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "overrideSessionTimeout" : {
          "type" : "integer",
          "format" : "int32"
        },
        "currentPassword" : {
          "type" : "string"
        },
        "localAccess" : {
          "type" : "boolean"
        },
        "disabled" : {
          "type" : "boolean"
        },
        "roleNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 2147483647,
          "minItems" : 0
        },
        "allowedLoginMethods" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "SiteGatewaysBeanList" : {
      "type" : "object",
      "required" : [ "items" ],
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SiteGatewaysBean"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/ListMeta"
        }
      }
    },
    "ModifiableSiteGatewaysBean" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "description" : "Description associated with the notification suppression config"
        },
        "gateways" : {
          "type" : "array",
          "description" : "Set of device id's that form the set of gateways for the site",
          "uniqueItems" : true,
          "items" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "links" : {
          "$ref" : "#/definitions/ResourceLink"
        }
      }
    }
  }
}